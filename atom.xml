<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>高登的个人博客</title>
  
  <subtitle>各人下雪，各人有各人的隐晦与皎洁</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-02-09T06:54:20.556Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>高登</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ElasticSearch7.6.x API操作详解</title>
    <link href="http://yoursite.com/2021/02/07/ElasticSearch7.6.x%20API%E6%93%8D%E4%BD%9C%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2021/02/07/ElasticSearch7.6.x API操作详解/</id>
    <published>2021-02-07T00:00:00.000Z</published>
    <updated>2021-02-09T06:54:20.556Z</updated>
    
    <content type="html"><![CDATA[</iframe><h2 id="Test-类"><a href="#Test-类" class="headerlink" title="Test 类"></a>Test 类</h2><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.zhuangesapi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializeFilter;</span><br><span class="line"><span class="keyword">import</span> com.zhuang.zhuangesapi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.util.QueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.delete.DeleteRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.delete.DeleteResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.support.master.AcknowledgedResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.update.UpdateRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.update.UpdateResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.GetIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.unit.TimeValue;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.MatchAllQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.TermQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchClientConfigTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"restHighLevelClient"</span>)</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line">    <span class="comment">//索引的创建</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建索引请求</span></span><br><span class="line">        CreateIndexRequest request=<span class="keyword">new</span> CreateIndexRequest(<span class="string">"kuang_index"</span>);</span><br><span class="line">        <span class="comment">//客户端执行请求IndicesClient,请求后获得响应</span></span><br><span class="line">        CreateIndexResponse createIndexResponse=  client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(createIndexResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试获取索引</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testExisIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest(<span class="string">"kuang_index"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> exists = client.indices().exists(request,RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDeleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">"kuang_index"</span>);</span><br><span class="line">        AcknowledgedResponse delete =client.indices().delete(request,RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(delete.isAcknowledged());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//测试添加文档</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testAddDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"狂神说"</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">/* 创建请求 */</span></span><br><span class="line">        IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">"kuang_index"</span>);</span><br><span class="line">        <span class="comment">//规则 put /kuang_index/doc/1</span></span><br><span class="line">        request.id(<span class="string">"1"</span>);</span><br><span class="line">        request.timeout(TimeValue.timeValueSeconds(<span class="number">1</span>));</span><br><span class="line">        request.timeout(<span class="string">"1s"</span>);</span><br><span class="line">        <span class="comment">//将数据放入请求 json</span></span><br><span class="line">        request.source(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//客户端发送请求，获取响应结果</span></span><br><span class="line">        IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(indexResponse.toString());</span><br><span class="line">        System.out.println(indexResponse.status());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文档</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testIsExists</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">"kuang_index"</span>, <span class="string">"1"</span>);</span><br><span class="line">        GetResponse getResponse = client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(getResponse.getSourceAsString());<span class="comment">//打印文档内容</span></span><br><span class="line">        System.out.println(getResponse);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//更新文档的信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testUpdateRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest(<span class="string">"kuang_index"</span>, <span class="string">"1"</span>);</span><br><span class="line">        updateRequest.timeout(<span class="string">"1s"</span>);</span><br><span class="line">    </span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"狂神说Java"</span>, <span class="number">18</span>);</span><br><span class="line">        updateRequest.doc(JSON.toJSONString(user),XContentType.JSON);</span><br><span class="line">    </span><br><span class="line">        UpdateResponse updateResponse = client.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(updateResponse.status());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除文档记录</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDeleteRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">"kuang_index"</span>, <span class="string">"1"</span>);</span><br><span class="line">        request.timeout(<span class="string">"1s"</span>);</span><br><span class="line">        DeleteResponse deleteResponse = client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(deleteResponse.status());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//特殊 批量插入</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        bulkRequest.timeout(<span class="string">"10s"</span>);</span><br><span class="line">    </span><br><span class="line">        ArrayList&lt;Object&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"kuangshen1"</span>,<span class="number">3</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"kuangshen2"</span>,<span class="number">3</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"kuangshen3"</span>,<span class="number">3</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"kuangshen4"</span>,<span class="number">3</span>));</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//批量处理请求</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;userList.size() ; i++) &#123;</span><br><span class="line">            <span class="comment">//批量更新和批量删除，就在这里秀爱第一请求就可以了</span></span><br><span class="line">            bulkRequest.add(</span><br><span class="line">                    <span class="keyword">new</span> IndexRequest(<span class="string">"kuang_index"</span>)</span><br><span class="line">                    .id(<span class="string">""</span>+(i+<span class="number">1</span>))</span><br><span class="line">                    .source(JSON.toJSONString(userList.get(i)),XContentType.JSON));</span><br><span class="line">            BulkResponse bulkResponse = client.bulk(bulkRequest,RequestOptions.DEFAULT);</span><br><span class="line">            System.out.println(bulkResponse.hasFailures());<span class="comment">//是否失败，返回 false b表示成功</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    <span class="comment">//SearchRequest 搜索请求</span></span><br><span class="line">    <span class="comment">//SearchSourceBuilder 条件构造</span></span><br><span class="line">    <span class="comment">//HighlightBuilder 构建高亮</span></span><br><span class="line">    <span class="comment">//TermQueryBuilder 精确查询</span></span><br><span class="line">    <span class="comment">// MatchAllQueryBuilder 匹配全部</span></span><br><span class="line">    <span class="comment">// xxx QueryBuilder</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">"kuang_index"</span>);</span><br><span class="line">        <span class="comment">//构建搜索条件</span></span><br><span class="line">    </span><br><span class="line">        SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();<span class="comment">//封装构建</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">//查询条件，可以用QueryBuilders 工具来实现</span></span><br><span class="line">        <span class="comment">//QueryBulider.termQuery 精确</span></span><br><span class="line">        <span class="comment">//QueryBuliders.matchAllQuery() 匹配所有</span></span><br><span class="line">        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">"name"</span>, <span class="string">"qinjiang1"</span>);</span><br><span class="line"><span class="comment">//        MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span></span><br><span class="line">        sourceBuilder.query(termQueryBuilder);<span class="comment">//精确</span></span><br><span class="line">        sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">        searchRequest.source(sourceBuilder);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//执行请求</span></span><br><span class="line">        SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    </span><br><span class="line">        System.out.println(JSON.toJSONString(searchResponse.getHits()));</span><br><span class="line">        System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit documentFields : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">            System.out.println(documentFields.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Config-类"><a href="#Config-类" class="headerlink" title="Config 类"></a>Config 类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.zhuang.zhuangesapi.config;</span><br><span class="line"></span><br><span class="line">import org.apache.http.HttpHost;</span><br><span class="line">import org.elasticsearch.client.RestClient;</span><br><span class="line">import org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class ElasticSearchClientConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    RestHighLevelClient restHighLevelClient()&#123;</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        new HttpHost(&quot;127.0.0.1&quot;,9200,&quot;http&quot;)</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        return client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;/iframe&gt;

&lt;h2 id=&quot;Test-类&quot;&gt;&lt;a href=&quot;#Test-类&quot; class=&quot;headerlink&quot; title=&quot;Test 类&quot;&gt;&lt;/a&gt;Test 类&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="学习 ES" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0-ES/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://yoursite.com/2021/02/01/Linux%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2021/02/01/Linux操作命令/</id>
    <published>2021-02-01T13:29:19.000Z</published>
    <updated>2021-03-25T07:52:15.230Z</updated>
    
    <content type="html"><![CDATA[</iframe><h1 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h1><a id="more"></a><blockquote><p><strong>1、cd命令</strong></p></blockquote><p>这是一个非常基本，也是大家经常需要使用的命令，它用于切换当前目录，它的参数是要切换到的目录的路径，可以是绝对路径，也可以是相对路径。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root/Docements # 切换到目录/root/Docements</span><br><span class="line">cd ./path          # 切换到当前目录下的path目录中，“.”表示当前目录 </span><br><span class="line">cd ../path         # 切换到上层目录中的path目录中，“..”表示上一层目录</span><br></pre></td></tr></table></figure><blockquote><p><strong>2、ls命令</strong></p></blockquote><p>这是一个非常有用的查看文件与目录的命令，list之意，它的参数非常多，下面就列出一些我常用的参数吧，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-l ：列出长数据串，包含文件的属性与权限数据等</span><br><span class="line">-a ：列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来（常用）</span><br><span class="line">-d ：仅列出目录本身，而不是列出目录的文件数据</span><br><span class="line">-h ：将文件容量以较易读的方式（GB，kB等）列出来</span><br><span class="line">-R ：连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来</span><br></pre></td></tr></table></figure><blockquote><p><strong>3、grep命令</strong></p></blockquote><p>该命令常用于分析一行的信息，若当中有我们所需要的信息，就将该行显示出来，该命令通常与管道命令一起使用，用于对一些命令的输出进行筛选加工等等，它的简单语法为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [-acinv] [--color=auto] &apos;查找字符串&apos; filename</span><br></pre></td></tr></table></figure><blockquote><p><strong>4、find命令</strong></p></blockquote><p>find是一个基于查找的功能非常强大的命令，相对而言，它的使用也相对较为复杂，参数也比较多，所以在这里将给把它们分类列出，它的基本语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">find [PATH] [option] [action]</span><br><span class="line"># 与时间有关的参数：-mtime n : n为数字，意思为在n天之前的“一天内”被更改过的文件；</span><br><span class="line">-mtime +n : 列出在n天之前（不含n天本身）被更改过的文件名；</span><br><span class="line">-mtime -n : 列出在n天之内（含n天本身）被更改过的文件名；</span><br><span class="line">-newer file : 列出比file还要新的文件名</span><br><span class="line"># 例如：</span><br><span class="line">find /root -mtime 0# 在当前目录下查找今天之内有改动的文件</span><br><span class="line"></span><br><span class="line"># 与用户或用户组名有关的参数：</span><br><span class="line">-user name : 列出文件所有者为name的文件</span><br><span class="line">-group name : 列出文件所属用户组为name的文件</span><br><span class="line">-uid n : 列出文件所有者为用户ID为n的文件</span><br><span class="line">-gid n : 列出文件所属用户组为用户组ID为n的文件</span><br><span class="line"># 例如：</span><br><span class="line">find /home/ljianhui -user ljianhui # 在目录/home/ljianhui中找出所有者为ljianhui的文件</span><br><span class="line"># 与文件权限及名称有关的参数：</span><br><span class="line">-name filename ：找出文件名为filename的文件</span><br><span class="line">-size [+-]SIZE ：找出比SIZE还要大（+）或小（-）的文件</span><br><span class="line">-tpye TYPE ：查找文件的类型为TYPE的文件，TYPE的值主要有：一般文件（f)、设备文件（b、c）、目录（d）、连接文件（l）、socket（s）、FIFO管道文件（p）；</span><br><span class="line">-perm mode ：查找文件权限刚好等于mode的文件，mode用数字表示，如0755；</span><br><span class="line">-perm -mode ：查找文件权限必须要全部包括mode权限的文件，mode用数字表示</span><br><span class="line">-perm +mode ：查找文件权限包含任一mode的权限的文件，mode用数字表示</span><br><span class="line"># 例如：</span><br><span class="line">find / -name passwd # 查找文件名为passwd的文件</span><br><span class="line">find . -perm 0755 # 查找当前目录中文件权限的0755的文件</span><br><span class="line">find . -size +12k # 查找当前目录中大于12KB的文件，注意c表示byte</span><br></pre></td></tr></table></figure><blockquote><p><strong>5、cp命令</strong></p></blockquote><p>该命令用于复制文件，copy之意，它还可以把多个文件一次性地复制到一个目录下，它的常用参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-a ：将文件的特性一起复制</span><br><span class="line">-p ：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份</span><br><span class="line">-i ：若目标文件已经存在时，在覆盖时会先询问操作的进行</span><br><span class="line">-r ：递归持续复制，用于目录的复制行为</span><br><span class="line">-u ：目标文件与源文件有差异时才会复制</span><br></pre></td></tr></table></figure><blockquote><p><strong>6、mv命令</strong></p></blockquote><p>该命令用于移动文件、目录或更名，move之意，它的常用参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f ：force强制的意思，如果目标文件已经存在，不会询问而直接覆盖 </span><br><span class="line">-i ：若目标文件已经存在，就会询问是否覆盖</span><br><span class="line">-u ：若目标文件已经存在，且比目标文件新，才会更新</span><br></pre></td></tr></table></figure><p>注：该命令可以把一个文件或多个文件一次移动一个文件夹中，但是最后一个目标文件一定要是“目录”。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv file1 file2 file3 dir # 把文件file1、file2、file3移动到目录dir中</span><br><span class="line">mv file1 file2 # 把文件file1重命名为file2</span><br></pre></td></tr></table></figure><blockquote><p><strong>7、rm命令</strong></p></blockquote><p>该命令用于删除文件或目录，remove之间，它的常用参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f ：就是force的意思，忽略不存在的文件，不会出现警告消息</span><br><span class="line">-i ：互动模式，在删除前会询问用户是否操作</span><br><span class="line">-r ：递归删除，最常用于目录删除，它是一个非常危险的参数</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -i file # 删除文件file，在删除之前会询问是否进行该操作</span><br><span class="line">rm -fr dir # 强制删除目录dir中的所有文件</span><br></pre></td></tr></table></figure><blockquote><p><strong>8、ps命令</strong></p></blockquote><p>该命令用于将某个时间点的进程运行情况选取下来并输出，process之意，它的常用参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-A ：所有的进程均显示出来</span><br><span class="line">-a ：不与terminal有关的所有进程</span><br><span class="line">-u ：有效用户的相关进程</span><br><span class="line">-x ：一般与a参数一起使用，可列出较完整的信息</span><br><span class="line">-l ：较长，较详细地将PID的信息列出</span><br></pre></td></tr></table></figure><p>其实我们只要记住ps一般使用的命令参数搭配即可，它们并不多，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps aux # 查看系统所有的进程数据</span><br><span class="line">ps ax # 查看不与terminal有关的所有进程</span><br><span class="line">ps -lA # 查看系统所有的进程数据</span><br><span class="line">ps axjf # 查看连同一部分进程树状态</span><br><span class="line">ps -ef|grep tomcat #查看tomcat运行状态</span><br></pre></td></tr></table></figure><blockquote><p><strong>9、kill命令</strong></p></blockquote><p>该命令用于向某个工作（%jobnumber）或者是某个PID（数字）传送一个信号，它通常与ps和jobs命令一起使用，它的基本语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill -signal PID</span><br><span class="line">kill -9 pid #一般配合ps命令使用杀tomcat进程，起到关闭tomcat作用。</span><br></pre></td></tr></table></figure><p><strong>signal的常用参数如下：</strong><br>注：最前面的数字为信号的代号，使用时可以用代号代替相应的信号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1：SIGHUP，启动被终止的进程</span><br><span class="line">2：SIGINT，相当于输入ctrl+c，中断一个程序的进行</span><br><span class="line">9：SIGKILL，强制中断一个进程的进行</span><br><span class="line">15：SIGTERM，以正常的结束进程方式来终止进程</span><br><span class="line">17：SIGSTOP，相当于输入ctrl+z，暂停一个进程的进行</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 以正常的结束进程方式来终于第一个后台工作，可用jobs命令查看后台中的第一个工作进程kill -SIGTERM %1 </span><br><span class="line"># 重新改动进程ID为PID的进程，PID可用ps命令通过管道命令加上grep命令进行筛选获得</span><br><span class="line">kill -SIGHUP PID</span><br></pre></td></tr></table></figure><blockquote><p><strong>10、killall命令</strong></p></blockquote><p>该命令用于向一个命令启动的进程发送一个信号，它的一般语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall [-iIe] [command name]</span><br></pre></td></tr></table></figure><p>它的参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-i ：交互式的意思，若需要删除时，会询问用户</span><br><span class="line">-e ：表示后面接的command name要一致，但command name不能超过15个字符</span><br><span class="line">-I ：命令名称忽略大小写</span><br><span class="line"># 例如：</span><br><span class="line">killall -SIGHUP syslogd # 重新启动syslogd</span><br></pre></td></tr></table></figure><blockquote><p><strong>11、file命令</strong></p></blockquote><p>该命令用于判断接在file命令后的文件的基本数据，因为在Linux下文件的类型并不是以后缀为分的，所以这个命令对我们来说就很有用了，它的用法非常简单，基本语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file filename</span><br><span class="line">#例如：</span><br><span class="line">file ./test</span><br></pre></td></tr></table></figure><blockquote><p><strong>12、tar命令</strong></p></blockquote><p>该命令用于对文件进行打包，默认情况并不会压缩，如果指定了相应的参数，它还会调用相应的压缩程序（如gzip和bzip等）进行压缩和解压。它的常用参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-c ：新建打包文件</span><br><span class="line">-t ：查看打包文件的内容含有哪些文件名</span><br><span class="line">-x ：解打包或解压缩的功能，可以搭配-C（大写）指定解压的目录，注意-c,-t,-x不能同时出现在同一条命令中</span><br><span class="line">-j ：通过bzip2的支持进行压缩/解压缩</span><br><span class="line">-z ：通过gzip的支持进行压缩/解压缩</span><br><span class="line">-v ：在压缩/解压缩过程中，将正在处理的文件名显示出来</span><br><span class="line">-f filename ：filename为要处理的文件</span><br><span class="line">-C dir ：指定压缩/解压缩的目录dir</span><br></pre></td></tr></table></figure><p>上面的解说可以已经让你晕过去了，但是通常我们只需要记住下面三条命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">压缩：tar -zcvf filename.tar 要被处理的文件或目录名称</span><br><span class="line">查询：tar -ztvf filename.tar</span><br><span class="line">解压：tar -zxvf filename.tar -C 欲解压缩的目录</span><br></pre></td></tr></table></figure><p>注：这里只适用于后缀.tar压缩文件，后缀为zip的压缩文件直接使用unzip进行解压。</p><blockquote><p><strong>13、cat命令</strong></p></blockquote><p>该命令用于查看文本文件的内容，后接要查看的文件名，通常可用管道与more和less一起使用，从而可以一页页地查看数据。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat text | less # 查看text文件中的内容</span><br><span class="line"># 注：这条命令也可以使用less text来代替</span><br></pre></td></tr></table></figure><blockquote><p><strong>14、chgrp命令</strong></p></blockquote><p>该命令用于改变文件所属用户组，它的使用非常简单，它的基本用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chgrp [-R] dirname/filename</span><br><span class="line">-R ：进行递归的持续对所有文件和子目录更改</span><br><span class="line"># 例如：</span><br><span class="line">chgrp users -R ./dir # 递归地把dir目录下中的所有文件和子目录下所有文件的用户组修改为users</span><br></pre></td></tr></table></figure><blockquote><p><strong>15、chmod命令</strong></p></blockquote><p>该命令用于改变文件的权限，一般的用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod [-R] xyz 文件或目录</span><br><span class="line">-R：进行递归的持续更改，即连同子目录下的所有文件都会更改</span><br></pre></td></tr></table></figure><p>同时，chmod还可以使用u（user）、g（group）、o（other）、a（all）和+（加入）、-（删除）、=（设置）跟rwx搭配来对文件的权限进行更改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 例如：</span><br><span class="line">chmod 0755 file # 把file的文件权限改变为-rxwr-xr-x</span><br><span class="line">chmod g+w file # 向file的文件权限中加入用户组可写权</span><br></pre></td></tr></table></figure><blockquote><p>16、 <strong>vim命令</strong></p></blockquote><p>该命令主要用于文本编辑，它接一个或多个文件名作为参数，如果文件存在就打开，如果文件不存在就以该文件名创建一个文件。vim是一个非常好用的文本编辑器，它里面有很多非常好用的命令，在这里不再多说。部分服务器没有vim命令也可以用vi命令代替，或者自行下周vim命令。</p><blockquote><p><strong>17、time命令</strong></p></blockquote><p>该命令用于测算一个命令（即程序）的执行时间。它的使用非常简单，就像平时输入命令一样，不过在命令的前面加入一个time即可，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time ./processtime ps aux</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5CHP%5CAppData%5CLocal%5CTemp%5C1612852727787.png" alt="1612852727787"></p>]]></content>
    
    <summary type="html">
    
      &lt;/iframe&gt;

&lt;h1 id=&quot;linux常用命令&quot;&gt;&lt;a href=&quot;#linux常用命令&quot; class=&quot;headerlink&quot; title=&quot;linux常用命令&quot;&gt;&lt;/a&gt;linux常用命令&lt;/h1&gt;
    
    </summary>
    
    
    
      <category term="学习 Linux" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0-Linux/"/>
    
  </entry>
  
  <entry>
    <title>毕设说</title>
    <link href="http://yoursite.com/2021/01/08/%E6%AF%95%E8%AE%BE%E8%AF%B4/"/>
    <id>http://yoursite.com/2021/01/08/毕设说/</id>
    <published>2021-01-07T17:13:50.674Z</published>
    <updated>2021-01-09T04:54:57.624Z</updated>
    
    <content type="html"><![CDATA[<p>毕设说</p><a id="more"></a><p>尊敬的老师下午好：<br>     我是17计算机一班的梁庄杰，我的毕设项目题目是 基于SpringBoot+Vue音乐网站设计与实现 。因为这一个多月我都在公司java开发实习，暂时只完成了后端代码与前端的后台，前台系统暂时还没有完善好。<br>首先我来介绍下项目的开发环境。这款项目是由windows系统开发，jdk的版本是1.8，mysql版本是8.0。开发软件主要用了idea2020.3、Visual、SQLyoung。<br>    然后来看一下后端项目的构建，先看一下数据库的表。collect是所有数据的汇总，comment是歌曲评论。consumer是用户表。rank表也是一个汇总表。然后看一下项目结构，java文件用来存放Java源码，包括程序的入口。resources用来存放静态资源。<br>    然后看下配置文件，application.properties 文件，用于连接数据库。generatorConfig.xml利用MyBatis Generator 自动生成代码（实体类，Mapper接口和Mapper.xml文件），需要指定mysql-connector-java （ src/main/resources 目录下）和生成文件的路径。在 src/main/resources<br>目录下创建 generatorConfig.xml 文件并配置。pom.xml 文件负责配置项目相关的依赖和插件。开发接口实体类（domain 目录下）定义数据库表所对应的实体类。Mapper 层 / DAO 层（dao、mapper 目录下）数据操作层：向数据库发送 SQL 语句，完成数据库操作。分为 Mapper 接口 和 Mapper 接口映射文件。<br>Service 层：服务层：完成业务逻辑处理。调用 Mapper 层操作数据库。分为 Service 接口 + Service 实现，用面向接口的编程思想，<br>方便后续功能的解藕及扩展。Controller 层，控制层：对请求和响应进行控制，调用 Service 层进行业务逻辑处理，最后将处理好的数据返回给前端。</p><p>最后总结一下：<br>当前端要访问数据的时候后端就提供相应接口，接口的编写是通过 Controller 层监听请求，<br> 数据的处理交给 Service 层，而 Service 层再通过 Mapper 层操作数据库，<br>操作完成后数据再一层层往上走，最后返回给前端。</p><h3 id="最终项目结构"><a href="#最终项目结构" class="headerlink" title="最终项目结构"></a>最终项目结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">├── avatorImages // 用户头像</span><br><span class="line">├── img</span><br><span class="line">│   ├── singerPic // 歌手图片</span><br><span class="line">│   ├── songListPic // 歌单图片</span><br><span class="line">│   └── songPic // 歌曲图片</span><br><span class="line">├── song // 存放歌曲</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── java</span><br><span class="line">│   │   │   └── com.example.demo</span><br><span class="line">│   │   │       ├── config // 配置（跨域）</span><br><span class="line">│   │   │       ├── controller // 控制层，接收请求返回响应</span><br><span class="line">│   │   │       ├── dao // 数据操作层</span><br><span class="line">│   │   │       ├── domain // 实体类</span><br><span class="line">│   │   │       ├── service</span><br><span class="line">│   │   │       │   └── impl // Service 层的接口</span><br><span class="line">│   │   │       └── HwMusicApplicationTests.java // 项目入口</span><br><span class="line">│   │   └── resources</span><br><span class="line">│   │       ├── mapper // mapper.xml文件，操作数据库</span><br><span class="line">│   │       ├── static // 存放静态资源</span><br><span class="line">│   │       ├── templates</span><br><span class="line">│   │       ├── application.properties // 连接数据库</span><br><span class="line">│   │       └── generatorConfig.xml // MyBatis Generator 自动生成代码</span><br><span class="line">│   └── test</span><br><span class="line">│       └── java</span><br><span class="line">│           └── com.example.demo // 测试用的</span><br><span class="line">├── pom.xml // 添加相关依赖和插件</span><br><span class="line">└── target</span><br></pre></td></tr></table></figure><p>客户端项目的构建：<br>1、创建项目<br>这里项目的创建比后端要简单的多，直接用官方提供的脚手架，安装 vue，创建项目，然后<br>npm install安装项目依赖，npm run dev命令就让项目跑起来。</p><p>开发思路：<br>       因为代码都放在一起对后期维护和修改都不方便，所以把他们根据功能或者位置拆分开，<br>放到 components 文件夹下面去实现，最后再整合到 views 文件夹下。加载到 App.vue 文件中，<br>最后渲染到页面中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">├── build //webpack相关配置文件</span><br><span class="line">├── config // vue基本配置文件</span><br><span class="line">├── node_modules // 包</span><br><span class="line">├── index.html  // 入口页面</span><br><span class="line">├── package.json // 管理包的依赖</span><br><span class="line">├── src // 项目源码目录</span><br><span class="line">│   ├── App.vue // 根组件</span><br><span class="line">│   ├── main.js //入口js文件</span><br><span class="line">│   ├── api // 封装请求的 api</span><br><span class="line">│   ├── assets // 静态资源，图片、js、css 等</span><br><span class="line">│   ├── mixins // 公共方法</span><br><span class="line">│   ├── components</span><br><span class="line">│   │   ├── TheHeader.vue //展示头部</span><br><span class="line">│   │   ├── Home.vue //展示主页面</span><br><span class="line">│   │   ├── Sidebar.vue //展示页面侧面</span><br><span class="line">│   │   └── SongAudio.vue //歌曲音频</span><br><span class="line">│   ├── pages</span><br><span class="line">│   │   ├── CollectPage.vue //收藏页 </span><br><span class="line">│   │   ├── CommentPage.vue //评论页</span><br><span class="line">│   │   ├── ConsumerPage.vue //用户管理页</span><br><span class="line">│   │   ├── InfoPage.vue //信息页(系统主页)</span><br><span class="line">│   │   ├── ListSongPage.vue //http://localhost:8080/#/ListSong?id=1</span><br><span class="line">│   │   ├── Login.vue //登录页面</span><br><span class="line">│   │   ├── SingerPage.vue //歌手管理页面</span><br><span class="line">│   │   ├── SongListPage.vue //歌单管理</span><br><span class="line">│   │   └── SongPage.vue //歌手管理中的歌曲管理页</span><br><span class="line">│   ├── router// 路由</span><br><span class="line">│   └── store  // 管理数据</span><br><span class="line">├── static // 存放静态资源 </span><br><span class="line">└── test // 测试文件目录</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">├── build // webpack相关配置文件</span><br><span class="line">├── config // vue基本配置文件</span><br><span class="line">├── node_modules // 包</span><br><span class="line">├── index.html // 入口页面</span><br><span class="line">├── package.json // 管理包的依赖</span><br><span class="line">├── src // 项目源码目录</span><br><span class="line">│   ├── assets  // 静态资源，图片、js、css 等</span><br><span class="line">│   ├── api  // 封装请求的 api</span><br><span class="line">│   ├── mixins // 公共方法</span><br><span class="line">│   ├── router // 路由</span><br><span class="line">│   ├── store // 管理数据</span><br><span class="line">│   ├── components</span><br><span class="line">│   │   ├── AlbumContent.vue // 展示歌单歌手包含的歌曲</span><br><span class="line">│   │   ├── Comment.vue // 评论</span><br><span class="line">│   │   ├── ContentList.vue // 展示歌单歌手区</span><br><span class="line">│   │   ├── LoginLogo.vue // 登录界面的logo</span><br><span class="line">│   │   ├── PlayBar.vue // 页面底部的播放控制区</span><br><span class="line">│   │   ├── ScrollTop.vue // 回到顶部</span><br><span class="line">│   │   ├── SongAudio.vue // 接收音乐并播放的位置</span><br><span class="line">│   │   ├── Swiper.vue // 轮播图</span><br><span class="line">│   │   ├── TheFooter.vue // 页脚</span><br><span class="line">│   │   ├── TheHeader.vue // 页头</span><br><span class="line">│   │   ├── TheAside.vue // 播放列表</span><br><span class="line">│   │   ├── Upload.vue // 修改头像</span><br><span class="line">│   │   ├── Info.vue // 个人信息区</span><br><span class="line">│   │   └── search // 搜索区</span><br><span class="line">│   │       ├── SearchSongLists.vue // 按歌单搜索</span><br><span class="line">│   │       └── SearchSongs.vue // 按歌手搜索</span><br><span class="line">│   ├── pages // 组件</span><br><span class="line">│   │   ├── 404.vue // 404</span><br><span class="line">│   │   ├── Home.vue // 首页</span><br><span class="line">│   │   ├── Setting.vue // 设置</span><br><span class="line">│   │   ├── Login.vue // 登录区</span><br><span class="line">│   │   ├── LoginUp.vue // 注册区</span><br><span class="line">│   │   ├── Lyric.vue // 歌词显示区</span><br><span class="line">│   │   ├── MyMusic.vue // 我的收藏区</span><br><span class="line">│   │   ├── Search.vue // 搜索区</span><br><span class="line">│   │   ├── Singer.vue // 歌手区</span><br><span class="line">│   │   ├── SingerAlbum.vue // 歌手详情</span><br><span class="line">│   │   ├── SongList.vue // 歌单区</span><br><span class="line">│   │   └── SongListAlbum.vue // 歌单详情</span><br><span class="line">│   ├── main.js // 入口js文件</span><br><span class="line">│   └── App.vue // 根组件</span><br><span class="line">├── static // 存放静态资源 </span><br><span class="line">├── test // 测试文件目录</span><br><span class="line">├── .babelrc // bable 编译配置</span><br><span class="line">└── .gitignore // 提交忽略的文件配置</span><br></pre></td></tr></table></figure><p>tip：<br>跨域问题： config @Configuration<br>consumerpage:用户管理<br>inforpage:系统首页</p><p>添加功能：<br><el-dialog>弹出<br><el-from> 提交</p><p>查询：<br>后台写查询方法，只需要在前端的src/api/index写接口，然后在singerpage调用方法，<br>在第9行 el-table设置查询前段格式。把图片放到cooker缓存里面，这是vue的一个非常重要的机制，<br>在src/store/index.js中缓存，export default store导出去， mixinx/index接收<br> mixinx/index是一个公共类，第10行getUrl根据相对地址获取绝对路径。<br>最后在museic-server/src/controller/SongListController中查询图片地址<br>导入mixin，所以mixinx/index中所有方法都可以用<br>在src/mixins中44h行判断性别</p><p>根据搜索框搜索：在watch监控值的变化，发生变化后执行代码。</p><p>分页：在每个vue文件中的computed中计算表的数据，pagination是分页的配置属性<br>methods获取当前页</p><p>歌曲管理：<br>新创一个songpage类，用click点击事件点击转向，在router/index设置转向的页面。</p><p>歌曲管理前端：<br>ListSongPage页面 通过getData查询的时候会通过116行songid查询个歌单下面的所有歌单列表，进行了一个转换，获取每一个歌曲的数据。<br>（就是数据库songlist表的songid查询 song表中的数据，传入到110 111行的tbaledate和tempdata中，124行getsong方法从后台查询，api/index中songofsingerid）。</p><p>用户管理：<br>添加新用户的表单验证<br>consumerpage 273行 rules方法（trigger: ‘blur’ 失去焦点） 371行中必须不为空</p><p>系统首页：<br>78行 从api/index中获取数据。<br>InfoPage83行返回数据。<br>饼图<ve-pie>：获取consumer后可以通过幻术setSex获取用户数，最后从methods调用数据。<br><ve-histogram>柱状图</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;毕设说&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>面试题</title>
    <link href="http://yoursite.com/2020/12/07/HashMap%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2020/12/07/HashMap底层原理/</id>
    <published>2020-12-07T14:49:30.000Z</published>
    <updated>2020-12-08T05:37:24.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础与语法"><a href="#基础与语法" class="headerlink" title="基础与语法"></a>基础与语法</h1><p>##String类的常用方法有哪些？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础与语法&quot;&gt;&lt;a href=&quot;#基础与语法&quot; class=&quot;headerlink&quot; title=&quot;基础与语法&quot;&gt;&lt;/a&gt;基础与语法&lt;/h1&gt;&lt;p&gt;##String类的常用方法有哪些？&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="http://yoursite.com/2020/11/28/Spring/"/>
    <id>http://yoursite.com/2020/11/28/Spring/</id>
    <published>2020-11-28T14:53:04.000Z</published>
    <updated>2020-11-30T03:06:59.124Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>复习</title>
    <link href="http://yoursite.com/2020/11/26/%E5%A4%8D%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/11/26/复习/</id>
    <published>2020-11-26T09:38:32.000Z</published>
    <updated>2020-11-30T16:05:15.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="此篇作为面试题的复习"><a href="#此篇作为面试题的复习" class="headerlink" title="此篇作为面试题的复习"></a>此篇作为面试题的复习</h1><a id="more"></a><h2 id="String-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的"><a href="#String-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的" class="headerlink" title="String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?"></a>String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?</h2><p>可变性<br>  简单的来说：String 类中使⽤ final 关键字修饰字符数组来保存字符串， private final char<br>value[] ，所以 String 对象是不可变的。<br>  ⽽ StringBuilder 与 StringBuffer 都继承⾃ AbstractStringBuilder 类，在<br>AbstractStringBuilder 中也是使⽤字符数组保存字符串 char[]value 但是没有⽤ final 关键字修<br>饰，所以这两种对象都是可变的。<br>  相同情况下使⽤ StringBuilder 相⽐使⽤ StringBuffer 仅能获得 10%~15% 左右的性能提升，<br>但却要冒多线程不安全的⻛险。</p><ul><li>对于三者使⽤的总结 ：*</li></ul><ol><li>操作少量的数据: 适⽤ String</li><li>单线程操作字符串缓冲区下操作⼤量数据: 适⽤ StringBuilder</li><li>多线程操作字符串缓冲区下操作⼤量数据: 适⽤ StringBuffer</li></ol><h2 id="2-与-equals"><a href="#2-与-equals" class="headerlink" title="2 == 与 equals"></a>2 == 与 equals</h2><p>== : 它的作⽤是判断两个对象的地址是不是相等。即，判断两个对象是不是同⼀个对象(基本数据类型，==⽐的是值，引⽤数据类型==⽐的是内存地址)。<br>equals() : 它的作⽤也是判断两个对象是否相等。但它⼀般有两种使⽤情况：<br>情况 1：类没有覆盖 equals() ⽅法。则通过 equals() ⽐᫾该类的两个对象时，等价于通过<br>“==”比较这两个对象。<br>情况 2：类覆盖了 equals() ⽅法。⼀般，我们都覆盖 equals() ⽅法来⽐᫾两个对象的内容是<br>否相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。<br><em>举个例子</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class test1 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String a = new String(&quot;ab&quot;); // a 为⼀个引⽤</span><br><span class="line">        String b = new String(&quot;ab&quot;); // b为另⼀个引⽤,对象的内容⼀样</span><br><span class="line">        String aa = &quot;ab&quot;; // 放在常量池中</span><br><span class="line">        String bb = &quot;ab&quot;; // 从常量池中查找</span><br><span class="line">        if (aa WX bb) // true</span><br><span class="line">            System.out.println(&quot;aaWXbb&quot;);</span><br><span class="line">        if (a WX b) // false，⾮同⼀对象</span><br><span class="line">           System.out.println(&quot;aWXb&quot;);</span><br><span class="line">        if (a.equals(b)) // true</span><br><span class="line">           System.out.println(&quot;aEQb&quot;);</span><br><span class="line">        if (42 WX 42.0) &#123; // true</span><br><span class="line">            System.out.println(&quot;true&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h2 id="hashCode（）介绍"><a href="#hashCode（）介绍" class="headerlink" title="hashCode（）介绍"></a>hashCode（）介绍</h2><p>   hashCode() 的作⽤是获取哈希码，也称为散列码；它实际上是返回⼀个 int 整数。这个哈希码的作⽤是确定该对象在哈希表中的索引位置。hashCode() 定义在 JDK 的 Object.java 中，这就意味着 Java中的任何类都包含有 hashCode() 函数。<br>   散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利⽤到了散列码！（可以快速找到所需要的对象）<br>   <strong>hashCode() 的作⽤就是获取哈希码，也称为散列码；它实际上是返回⼀个 int<br>整数。这个哈希码的作⽤是确定该对象在哈希表中的索引位置。 hashCode() 在散列表中才有⽤，在<br>其它情况下没⽤。在散列表中 hashCode() 的作⽤是获取对象的散列码，进⽽确定该对象在散列表中的<br>位置。</strong></p><h2 id="简述线程、程序、进程的基本概念"><a href="#简述线程、程序、进程的基本概念" class="headerlink" title="简述线程、程序、进程的基本概念"></a>简述线程、程序、进程的基本概念</h2><p> 进程是程序的⼀次执⾏过程，是系统运⾏程序的基本单位，因此进程是动态的。系统运⾏⼀个程序即是⼀个进程从创建，运⾏到消亡的过程。</p><p> 程序是含有指令和数据的⽂件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。<br> 线程与进程相似，但线程是⼀个⽐进程更⼩的执⾏单位。⼀个进程在其执⾏的过程中可以产⽣多个线程。</p><h2 id="Java-中-IO-流分为⼏种"><a href="#Java-中-IO-流分为⼏种" class="headerlink" title="Java 中 IO 流分为⼏种?"></a>Java 中 IO 流分为⼏种?</h2><ul><li>按照流的流向分，可以分为输⼊流和输出流；</li><li>按照操作单元划分，可以划分为字节流和字符流；</li><li>按照流的⻆⾊划分为节点流和处理流。</li></ul><ul><li>InputStream/Reader: 所有的输⼊流的基类，前者是字节输⼊流，后者是字符输⼊流。</li><li>OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul><h2 id="既然有了字节流-为什么还要有字符流"><a href="#既然有了字节流-为什么还要有字符流" class="headerlink" title="既然有了字节流,为什么还要有字符流?"></a>既然有了字节流,为什么还要有字符流?</h2><p>字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是⾮常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就⼲脆提供了⼀个直接操作字符的接⼝，⽅便我们平时对字符进⾏流操作。如果⾳频⽂件、图⽚等媒体⽂件⽤字节流比较好，如果涉及到字符的话使⽤字符流比较好。</p><h2 id="说说List-Set-Map三者的区别？"><a href="#说说List-Set-Map三者的区别？" class="headerlink" title="说说List,Set,Map三者的区别？"></a>说说List,Set,Map三者的区别？</h2><ul><li>List(对付顺序的好帮⼿)： List接⼝存储⼀组不唯⼀（可以有多个元素引⽤相同的对象），有序的对象</li><li>Set(注重独⼀⽆⼆的性质): 不允许重复的集合。不会有多个元素引⽤相同的对象。</li><li>Map(⽤Key来搜索的专家): 使⽤键值对存储。Map会维护与Key有关联的值。两个Key可以引⽤相<br>同的对象，但Key不能重复，典型的Key是String类型，但也可以是任何对象。</li></ul><h2 id="Arraylist-与-LinkedList-区别"><a href="#Arraylist-与-LinkedList-区别" class="headerlink" title="Arraylist 与 LinkedList 区别?"></a>Arraylist 与 LinkedList 区别?</h2><ol><li>是否保证线程安全： ArrayList 和 LinkedList 都是不同步的，也就是不保证线程安全；</li><li>底层数据结构： Arraylist 底层使⽤的是 Object 数组； LinkedList 底层使⽤的是<br> 双向链表 数据结构</li><li>插⼊和删除是否受元素位置的影响： ① ArrayList 采⽤数组存储，所以插⼊和删除元素的时间复杂度受元素位置的影响。 LinkedList 采⽤链表存储，所以对于 add(E e) ⽅法的插⼊，删除元素时间复杂度不受元素位置的影响，近似 O（1），如果是要在指定位置 i 插⼊和删除元素的话（ (add(int index, E element) ） 时间复杂度近似为 o(n)) 因为需要先移动到指定位置再插⼊。</li></ol><h2 id="和-的区别是什么？"><a href="#和-的区别是什么？" class="headerlink" title="#{}和${}的区别是什么？"></a>#{}和${}的区别是什么？</h2><ul><li><p>${} 是 Properties ⽂件中的变量占位符，它可以⽤于标签属性值和 sql 内部，属于静态⽂本<br>替换，⽐如${driver}会被静态替换为 com.mysql.jdbc.Driver 。</p></li><li><p>#{} 是 sql 的参数占位符，Mybatis 会将 sql 中的 #{} 替换为?号，在 sql 执⾏前会使⽤<br>PreparedStatement 的参数设置⽅法，按序给 sql 的?号占位符设置参数值，⽐如<br>ps.setInt(0, parameterValue)， #{item.name} 的取值⽅式为使⽤反射从参数对象中获取<br>item 对象的 name 属性值，相当于 param.getItem().getName() 。</p></li></ul><p><strong>#{}是预编译处理，${}是字符串替换</strong></p><h2 id="关于-JVM-JDK-和-JRE-最详细通俗的解答"><a href="#关于-JVM-JDK-和-JRE-最详细通俗的解答" class="headerlink" title="关于 JVM JDK 和 JRE 最详细通俗的解答"></a>关于 JVM JDK 和 JRE 最详细通俗的解答</h2><p><strong>JVM</strong></p><p>Java 虚拟机（JVM）是运⾏ Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），⽬的是使⽤相同的字节码，它们都会给出相同的结果。</p><h3 id="什么是字节码-采⽤字节码的好处是什么"><a href="#什么是字节码-采⽤字节码的好处是什么" class="headerlink" title="什么是字节码?采⽤字节码的好处是什么?"></a>什么是字节码?采⽤字节码的好处是什么?</h3><blockquote><p>在 Java 中，JVM 可以理解的代码就叫做 字节码 （即扩展名为 .class 的⽂件），它不⾯向任何特定的处理器，只⾯向虚拟机。Java 语⾔通过字节码的⽅式，在⼀定程度上解决了传统解释型语⾔执⾏效率低的问题，同时⼜保留了解释型语⾔可移植的特点。所以 Java 程序运⾏时比较⾼效，⽽且，由于字节码并不针对⼀种特定的机器，因此，Java 程序⽆须重新编译便可在多种不同操作系统的计算机上运⾏。</p></blockquote><p>Java 程序从源代码到运⾏⼀般有下⾯ 3 步：<br>.java文件（源代码）====（JDK中的javac编译）====&gt;.class文件（JVM可理解的Java字节）=====JVM=====&gt;机器可执行的二进制机器码</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p><strong>Java 虚拟机（JVM）是运⾏ Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），⽬的是使⽤相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语⾔“⼀次编译，随处可以运⾏”的关键所在。</strong></p><h3 id="JDK-和-JRE"><a href="#JDK-和-JRE" class="headerlink" title="JDK 和 JRE"></a>JDK 和 JRE</h3><p>JDK 是 Java Development Kit，它是功能⻬全的 Java SDK。它拥有 JRE 所拥有的⼀切，还有编译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。</p><p>JRE 是 Java 运⾏时环境。它是运⾏已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的⼀些基础构件。但是，它不能⽤于创建新程序。</p><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p><strong>进程：</strong><br>进程是程序的⼀次执⾏过程，是系统运⾏程序的基本单位，因此进程是动态的。系统运⾏⼀个程序即是⼀个进程从创建，运⾏到消亡的过程。<br><strong>线程</strong><br>线程与进程相似，但线程是⼀个⽐进程更⼩的执⾏单位。⼀个进程在其执⾏的过程中可以产⽣多个线程。<br><strong>二者关系：</strong>线程 是 进程 划分成的更⼩的运⾏单位。线程和进程最⼤的不同在于基本上各进程是独⽴的，⽽各线程则不⼀定，因为同⼀进程中的线程极有可能会相互影响。线程执⾏开销⼩，但不利于资源的管理和保护；⽽进程正相反</p><h2 id="为什么要使⽤多线程呢"><a href="#为什么要使⽤多线程呢" class="headerlink" title="为什么要使⽤多线程呢?"></a>为什么要使⽤多线程呢?</h2><ul><li><strong>从当代互联⽹发展趋势来说：</strong> 现在的系统动不动就要求百万级甚⾄千万级的并发量，⽽多线程并发编程正是开发⾼并发系统的基础，利⽤好多线程机制可以⼤⼤提⾼系统整体的并发能⼒以及性能。</li><li><strong>从计算机底层来说：</strong> 线程可以⽐作是轻量级的进程，是程序执⾏的最⼩单位,线程间的切换和调度的成本远远⼩于进程。另外，多核 CPU 时代意味着多个线程可以同时运⾏，这减少了线程上下⽂切换的开销。</li><li><strong>多核时代：</strong> 多核时代多线程主要是为了提⾼ CPU 利⽤率。举个例⼦：假如我们要计算⼀个复杂的任务，我们只⽤⼀个线程的话，CPU 只会⼀个 CPU 核⼼被利⽤到，⽽创建多个线程就可以让多个 CPU 核⼼被利⽤到，这样就提⾼了 CPU 的利⽤率。</li><li><strong>单核时代：</strong> 在单核时代多线程主要是为了提⾼ CPU 和 IO 设备的综合利⽤率。举个例⼦：当只有⼀个线程的时候会导致 CPU 计算时，IO 设备空闲；进⾏ IO 操作时，CPU 空闲。我们可以简单地说这两者的利⽤率⽬前都是 50%左右。但是当有两个线程的时候就不⼀样了，当⼀个线程执⾏ CPU 计算时，另外⼀个线程可以进⾏ IO 操作，这样两个的利⽤率就可以在理想情况下达到100%了。</li></ul><p><strong>什么是上下⽂切换?</strong><br>当前任务在执⾏完 CPU 时间⽚切换到另⼀个任务之前会先保存⾃⼰的状态，以便下次再切换回这个任务时，可以再加载这个任务的状态。<strong>任务从保存到再加载的过程就是⼀次上下⽂切换。</strong></p><p><strong>认识线程死锁</strong><br>线程死锁描述的是这样⼀种情况：多个线程同时被阻塞，它们中的⼀个或者全部都在等待某个资源被释放。由于线程被⽆限期地阻塞，因此程序不可能正常终⽌。</p><h2 id="说说线程的⽣命周期和状态"><a href="#说说线程的⽣命周期和状态" class="headerlink" title="说说线程的⽣命周期和状态?"></a>说说线程的⽣命周期和状态?</h2><table><thead><tr><th align="center">状态名称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">NEW</td><td align="center">初始状态</td></tr><tr><td align="center">RUNNABLE</td><td align="center">运行状态</td></tr><tr><td align="center">BLOCKED</td><td align="center">阻塞状态</td></tr><tr><td align="center">WAITING</td><td align="center">等待状态</td></tr><tr><td align="center">TIME_WAITING</td><td align="center">超时等待状态</td></tr><tr><td align="center">TERMINATED</td><td align="center">终止状态</td></tr></tbody></table><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="什么是MySQL"><a href="#什么是MySQL" class="headerlink" title="什么是MySQL?"></a>什么是MySQL?</h2><p>MySQL 是⼀种关系型数据库，在Java企业级开发中⾮常常⽤，MySQL的默认端⼝号是3306。</p><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p><strong>⼀些常⽤命令</strong><br><strong>查看MySQL提供的所有存储引擎</strong><br>    mysql&gt; show engines;<br><strong>查看MySQL当前默认的存储引擎</strong><br>    mysql&gt; show variables like ‘%storage_engine%’;<br><strong>查看表的存储引擎</strong><br>    show table status like “table_name” ;<br><strong>开启事务</strong><br>　　　　　　mysql&gt; begin; | start transactions;<br><strong>终止事务</strong><br>　　　　　　mysql&gt; commit; | rollback;</p><h2 id="字符集及校对规则"><a href="#字符集及校对规则" class="headerlink" title="字符集及校对规则"></a>字符集及校对规则</h2><p>字符集指的是⼀种从⼆进制编码到某类字符符号的映射。校对规则则是指某种字符集下的排序规则。MySQL中每⼀种字符集都会对应⼀系列的校对规则。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>MySQL索引使⽤的数据结构主要有BTree索引 和 哈希索引 。对于哈希索引来说，底层的数据结构就是哈希表，因此在绝⼤多数需求为单条记录查询的时候，可以选择哈希索引，查询性能最快；其余⼤部分场景，建议选择BTree索引。</p><h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务?"></a>什么是事务?</h2><p>事务是逻辑上的⼀组操作，要么都执⾏，要么都不执⾏。(比如银行转账)</p><h3 id="事物的四⼤特性"><a href="#事物的四⼤特性" class="headerlink" title="事物的四⼤特性"></a>事物的四⼤特性</h3><ol><li>原⼦性（Atomicity）： 事务是最⼩的执⾏单位，不允许分割。事务的原⼦性确保动作要么全部<br>完成，要么完全不起作⽤；</li><li>⼀致性（Consistency）： 执⾏事务前后，数据保持⼀致，多个事务对同⼀个数据读取的结果是相同的；</li><li>隔离性（Isolation）： 并发访问数据库时，⼀个⽤户的事务不被其他事务所⼲扰，各并发事务之间数据库是独⽴的；</li><li>持久性（Durability）： ⼀个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发⽣故障也不应该对其有任何影响。</li></ol><h2 id="并发事务带来哪些问题"><a href="#并发事务带来哪些问题" class="headerlink" title="并发事务带来哪些问题?"></a>并发事务带来哪些问题?</h2><ul><li><strong>脏读（Dirty read）:</strong>  当⼀个事务正在访问数据并且对数据进⾏了修改，⽽这种修改还没有提交到数据库中，这时另外⼀个事务也访问了这个数据，然后使⽤了这个数据。因为这个数据是还没<br>有提交的数据，那么另外⼀个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是<br>不正确的。</li><li><strong>丢失修改（Lost to modify）:</strong> 指在⼀个事务读取⼀个数据时，另外⼀个事务也访问了该数据，那么在第⼀个事务中修改了这个数据后，第⼆个事务也修改了这个数据。这样第⼀个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取<br>A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。</li><li><strong>不可重复读（Unrepeatableread）:</strong> 指在⼀个事务内多次读同⼀数据。在这个事务还没有结束<br>时，另⼀个事务也访问该数据。那么，在第⼀个事务中的两次读数据之间，由于第⼆个事务的修<br>改导致第⼀个事务两次读取的数据可能不太⼀样。这就发⽣了在⼀个事务内两次读到的数据是不<br>⼀样的情况，因此称为不可重复读。</li><li>*<em>幻读（Phantom read）: *</em>幻读与不可重复读类似。它发⽣在⼀个事务（T1）读取了⼏⾏数据，接着另⼀个并发事务（T2）插⼊了⼀些数据时。在随后的查询中，第⼀个事务（T1）就会发现多了<br>⼀些原本不存在的记录，就好像发⽣了幻觉⼀样，所以称为幻读。</li></ul><p><strong>不可重复读和幻读区别：</strong><br>不可重复读的重点是修改⽐如多次读取⼀条记录发现其中某些列的值被修改，幻读的重点在于新增或者删除⽐如多次读取⼀条记录发现记录增多或减少了。</p><h2 id="事务隔离级别有哪些-MySQL的默认隔离级别是"><a href="#事务隔离级别有哪些-MySQL的默认隔离级别是" class="headerlink" title="事务隔离级别有哪些?MySQL的默认隔离级别是?"></a>事务隔离级别有哪些?MySQL的默认隔离级别是?</h2><ul><li>*<em>READ-UNCOMMITTED(读取未提交)： *</em>最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</li><li><strong>READ-COMMITTED(读取已提交)：</strong> 允许读取并发事务已经提交的数据，可以阻⽌脏读，但是幻读或不可重复读仍有可能发⽣。</li><li><strong>REPEATABLE-READ(可重复读)：</strong> 对同⼀字段的多次读取结果都是⼀致的，除⾮数据是被本身事务⾃⼰所修改，可以阻⽌脏读和不可重复读，但幻读仍有可能发⽣。</li><li><strong>SERIALIZABLE(可串⾏化)：</strong> 最⾼的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执⾏，这样事务之间就完全不可能产⽣⼲扰，也就是说，该级别可以防⽌脏读、不可重复读以及幻读。</li></ul><h2 id="数据库优化"><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h2><p>a) 选择合适的字段，比如邮箱字段可以设为char（6），尽量把字段设置为notnull，这样查询的时候数据库就不需要比较null值<br>b) 使用关联查询（ left join on）查询代替子查询<br>c) 使用union联合查询手动创建临时表<br>d) 开启事物，当数据库执行多条语句出现错误时，事物会回滚，可以维护数据库的完整性<br>e) 使用外键，事物可以维护数据的完整性但是它却不能保证数据的关联性，使用外键可以保证数据的关联性<br>f) 使用索引，索引是提高数据库性能的常用方法，它可以令数据库服务器以比没有索引快的多的速度检索特定的行，特别是对于max，min，order by查询时，效果更明显<br>g) 优化的查询语句，绝大多数情况下，使用索引可以提高查询的速度，但如果sql语句使用不恰当的话，索引无法发挥它的特性。</p><h2 id="redis-简介"><a href="#redis-简介" class="headerlink" title="redis 简介"></a>redis 简介</h2><p>简单来说 redis 就是⼀个数据库，不过与传统数据库不同的是 redis 的数据是存在内存中的，所以读<br>写速度⾮常快，因此 redis 被⼴泛应⽤于缓存⽅向。<br><strong>为什么要⽤ redis/为什么要⽤缓存</strong><br>主要从“⾼性能”和“⾼并发”这两点来看待这个问题。<br><strong>高性能</strong><br>假如⽤户第⼀次访问数据库中的某些数据。这个过程会⽐᫾慢，因为是从硬盘上读取的。将该⽤户访问的数据存在缓存中，这样下⼀次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！<br><strong>⾼并发：</strong><br>直接操作缓存能够承受的请求是远远⼤于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样⽤户的⼀部分请求会直接到缓存这⾥⽽不⽤经过数据库。</p><h2 id="缓存雪崩和缓存穿透问题解决⽅案"><a href="#缓存雪崩和缓存穿透问题解决⽅案" class="headerlink" title="** 缓存雪崩和缓存穿透问题解决⽅案**"></a>** 缓存雪崩和缓存穿透问题解决⽅案**</h2><p><strong>什么是缓存雪崩？</strong><br>简介：缓存同⼀时间⼤⾯积的失效，所以，后⾯的请求都会落到数据库上，造成数据库短时间内承受⼤量请求⽽崩掉。<br><strong>有哪些解决办法？</strong></p><ul><li>事前：尽量保证整个 redis 集群的⾼可⽤性，发现机器宕机尽快补上。选择合适的内存淘汰策略。</li><li>事中：本地ehcache缓存 + hystrix限流&amp;降级，避免MySQL崩掉</li><li>事后：利⽤ redis 持久化机制保存的数据尽快恢复缓存</li></ul><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a><strong>队列（Queue）</strong></h2><p>队列是数据结构中比较重要的⼀种类型，它⽀持 FIFO（先进先出），尾部添加、头部删除（先进队列的元素先出队列），跟我们⽣活中的排队类似。<br><strong>队列的种类</strong></p><ul><li>单队列（单队列就是常⻅的队列, 每次添加元素时，都是添加到队尾，存在“假溢出”的问题也就<br>是明明有位置却不能添加的情况）</li><li>循环队列（避免了“假溢出”的问题）</li></ul><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p><strong>什么是 Set</strong><br>Set 继承于 Collection 接⼝，是⼀个不允许出现重复元素，并且⽆序的集合，主要 HashSet 和<br>TreeSet 两⼤实现类。<br>在判断重复元素的时候，HashSet 集合会调⽤ hashCode()和 equal()⽅法来实现；TreeSet 集合会调<br>⽤compareTo⽅法来实现。<br><strong>补充：有序集合与⽆序集合说明</strong></p><ul><li>有序集合：集合⾥的元素可以根据 key 或 index 访问 (List、Map)</li><li>⽆序集合：集合⾥的元素只能遍历。（Set）</li></ul><p><strong>HashSet 和 TreeSet 底层数据结构</strong><br>HashSet 是哈希表结构，主要利⽤ HashMap 的 key 来存储元素，计算插⼊元素的 hashCode 来获取元素在集合中的位置；</p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p><strong>什么是List</strong><br>在 List 中，⽤户可以精确控制列表中每个元素的插⼊位置，另外⽤户可以通过整数索引（列表中的位置）访问元素，并搜索列表中的元素。 与 Set 不同，List 通常允许重复的元素。 另外 List 是有序<br>集合⽽ Set 是⽆序集合。</p><p><strong>List的常⻅实现类</strong><br>ArrayList 是⼀个数组队列，相当于动态数组。它由数组实现，随机访问效率⾼，随机插⼊、随机删除效率低。<br>LinkedList 是⼀个双向链表。它也可以被当作堆栈、队列或双端队列进⾏操作。LinkedList随机访问<br>效率低，但随机插⼊、随机删除效率⾼。<br>Vector 是⽮量队列，和ArrayList⼀样，它也是⼀个动态数组，由数组实现。但是ArrayList是⾮线程<br>安全的，⽽Vector是线程安全的。<br>Stack 是栈，它继承于Vector。它的特性是：先进后出(FILO, First In Last Out)。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;此篇作为面试题的复习&quot;&gt;&lt;a href=&quot;#此篇作为面试题的复习&quot; class=&quot;headerlink&quot; title=&quot;此篇作为面试题的复习&quot;&gt;&lt;/a&gt;此篇作为面试题的复习&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>日志管理</title>
    <link href="http://yoursite.com/2020/11/25/%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2020/11/25/日志管理/</id>
    <published>2020-11-24T19:39:35.000Z</published>
    <updated>2020-12-05T08:57:43.993Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-日志管理设计说明"><a href="#1-日志管理设计说明" class="headerlink" title="1 日志管理设计说明"></a>1 日志管理设计说明</h1><h2 id="1-1-业务设计说明"><a href="#1-1-业务设计说明" class="headerlink" title="1.1 业务设计说明"></a>1.1 <strong>业务设计说明</strong></h2><p> 本模块主要是实现对用户行为日志(例如谁在什么时间点执行了什么操作,访问了哪些方法,传递的什么参数,执行时长等)进行记录、查询、删除等操作。其表设计语句如下：</p> <a id="more"></a><p><strong>CREATE</strong> <strong>TABLE</strong> <code>sys_logs</code> (</p><p>  <code>id</code> bigint(20) <strong>NOT</strong> <strong>NULL</strong> AUTO_INCREMENT,</p><p>  <code>username</code> <strong>varchar</strong>(50) <strong>DEFAULT</strong>  <strong>NULL</strong> COMMENT ‘登陆用户名’,</p><p>  <code>operation</code> <strong>varchar</strong>(50) <strong>DEFAULT</strong> <strong>NULL</strong> COMMENT ‘用户操作’,</p><p>  <code>method</code> <strong>varchar</strong>(200) <strong>DEFAULT</strong> <strong>NULL</strong> COMMENT ‘请求方法’,</p><p>  <code>params</code> <strong>varchar</strong>(5000) <strong>DEFAULT</strong> <strong>NULL</strong> COMMENT ‘请求参数’,</p><p>  <code>**time**</code> bigint(20) <strong>NOT</strong> <strong>NULL</strong> COMMENT ‘执行时长(毫秒)’,</p><p>  <code>ip</code> <strong>varchar</strong>(64) <strong>DEFAULT</strong> <strong>NULL</strong> COMMENT ‘IP地址’,</p><p>  <code>createdTime</code> datetime <strong>DEFAULT</strong> <strong>NULL</strong> COMMENT ‘日志记录时间’,</p><p>  <strong>PRIMARY</strong> <strong>KEY</strong> (<code>id</code>)</p><p>) ENGINE=InnoDB AUTO_INCREMENT=1 <strong>DEFAULT</strong> CHARSET=utf8 COMMENT=’系统日志’;</p><h2 id="1-1-原型设计说明"><a href="#1-1-原型设计说明" class="headerlink" title="1.1 原型设计说明"></a>1.1 <strong>原型设计说明</strong></h2><p>基于用户需求，实现静态页面(html/css/js)，通过静态页面为用户呈现基本需求实现，</p><img src='http://i1.fuimg.com/706016/ab1aa9fae0b5f5fb.png'><h1 id="2-日志管理列表页面呈现"><a href="#2-日志管理列表页面呈现" class="headerlink" title="2 日志管理列表页面呈现"></a>2 <strong>日志管理列表页面呈现</strong></h1><h3 id="Controller实现"><a href="#Controller实现" class="headerlink" title="Controller实现"></a><strong>Controller实现</strong></h3><p>▪ 业务描述与设计实现</p><p>基于日志管理的请求业务，在PageController中添加doLogUI方法，doPageUI方法分别用于返回日志列表页面，日志分页页面。</p><p>▪ 关键代码设计与实现</p><p>第一步：在PageController中定义返回日志列表的方法。代码如下：</p><p>@RequestMapping(“log/log_list”)</p><p><strong>public</strong> String doLogUI() {</p><p>​    <strong>return</strong> “sys/log_list”;</p><p>}</p><p>第二步：在PageController中定义用于返回分页页面的方法。代码如下：</p><p>@RequestMapping(“doPageUI”)</p><p><strong>public</strong> String doPageUI() {</p><p>​    <strong>return</strong> “common/page”;</p><p>}</p><h2 id="2-3客户端实现"><a href="#2-3客户端实现" class="headerlink" title="2.3客户端实现"></a>2.3客户端实现</h2><h1 id="日志菜单事件处理"><a href="#日志菜单事件处理" class="headerlink" title="日志菜单事件处理"></a>日志菜单事件处理</h1><p>▪ 业务描述与设计</p><p>首先准备日志列表页面(/templates/pages/sys/log_list.html)，然后在starter.html页面中点击日志管理菜单时异步加载日志列表页面。</p><p>▪ 关键代码设计与实现</p><p>找到项目中的starter.html 页面，页面加载完成以后，注册日志管理菜单项的点击事件，当点击日志管理时，执行事件处理函数。关键代码如下：</p><p>$(function(){</p><p>​     doLoadUI(“load-log-id”,”log/log_list”)</p><p>})</p><p>function doLoadUI(id,url){</p><pre><code>$(&quot;#&quot;+id).click(function(){</code></pre><p>​        $(“#mainContentId”).load(url);</p><p>​    });</p><p>}</p><p>其中，load函数为jquery中的ajax异步请求函数。</p><h2 id="日志列表页面事件处理"><a href="#日志列表页面事件处理" class="headerlink" title="日志列表页面事件处理"></a><strong>日志列表页面事件处理</strong></h2><p>▪ 业务描述与设计实现</p><p>当日志列表页面加载完成以后异步加载分页页面（page.html）。</p><p>▪ 关键代码设计与实现：</p><p>在log_list.html页面中异步加载page页面，这样可以实现分页页面重用，哪里需要分页页面，哪里就进行页面加载即可。关键代码如下：</p><p>$(function(){</p><p>​    $(“#pageId”).load(“doPageUI”);</p><p>});</p><p>说明：数据加载通常是一个相对比较耗时操作，为了改善用户体验，可以先为用户呈现一个页面，数据加载时，显示数据正在加载中,数据加载完成以后再呈现数据。这样也可满足现阶段不同类型客户端需求(例如手机端,电脑端,电视端,手表端。)</p><h1 id="3日志管理列表数据呈现"><a href="#3日志管理列表数据呈现" class="headerlink" title="3日志管理列表数据呈现"></a>3日志管理列表数据呈现</h1><h2 id="服务端关键业务及代码实现"><a href="#服务端关键业务及代码实现" class="headerlink" title="服务端关键业务及代码实现"></a>服务端关键业务及代码实现</h2><h3 id="Entity类实现"><a href="#Entity类实现" class="headerlink" title="Entity类实现"></a>Entity类实现</h3><ul><li>构建实体对象（POJO）封装从数据库查询到的记录，一行记录映射为内存中一个的这样的对象。对象属性定义时尽量与表中字段有一定的映射关系，并添加对应的set/get/toString等方法，便于对数据进行更好的操作。</li><li>▪关键代码分析及实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.cy.pj.sys.entity;</span><br><span class="line">    <span class="keyword">import</span> java.io.Serializable;</span><br><span class="line">    <span class="keyword">import</span> java.util.Date;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysLog</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">//用户操作</span></span><br><span class="line">    <span class="keyword">private</span> String operation;</span><br><span class="line">    <span class="comment">//请求方法</span></span><br><span class="line">    <span class="keyword">private</span> String method;</span><br><span class="line">    <span class="comment">//请求参数</span></span><br><span class="line">    <span class="keyword">private</span> String params;</span><br><span class="line">    <span class="comment">//执行时长(毫秒)</span></span><br><span class="line">    <span class="keyword">private</span> Long time;</span><br><span class="line">    <span class="comment">//IP地址</span></span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date createdTime;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**设置：*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**获取：*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**设置：用户名*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 获取：用户名*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**设置：用户操作*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOperation</span><span class="params">(String operation)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.operation = operation;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**获取：用户操作*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> operation;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**设置：请求方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMethod</span><span class="params">(String method)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**获取：请求方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> method;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 设置：请求参数*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParams</span><span class="params">(String params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.params = params;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 获取：请求参数 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**设置：IP地址 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIp</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ip = ip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 获取：IP地址*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 设置：创建时间*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateDate</span><span class="params">(Date createdTime)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.createdTime = createdTime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 获取：创建时间*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreatedTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createdTime;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(Long time)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  说明：通过此对象除了可以封装从数据库查询的数据，还可以封装客户端请求数据，实现层与层之间数据的传递。</p><h3 id="Dao接口实现"><a href="#Dao接口实现" class="headerlink" title="Dao接口实现"></a>Dao接口实现</h3><ul><li>业务描述及设计实现<br>通过数据层对象，基于业务层参数数据查询日志记录总数以及当前页要呈现的用户行为日志信息。</li><li>关键代码分析及实现：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysLogDao</span> </span>&#123;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>第二步：在SysLogDao接口中添加getRowCount方法用于按条件统计记录总数。代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username 查询条件(例如查询哪个用户的日志信息)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 总记录数(基于这个结果可以计算总页数)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getRowCount</span><span class="params">(@Param(<span class="string">"username"</span>)</span> String username)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>第三步：在SysLogDao接口中添加findPageObjects方法，基于此方法实现当前页记录的数据查询操作。代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username  查询条件(例如查询哪个用户的日志信息)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startIndex 当前页的起始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize 当前页的页面大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 当前页的日志记录信息</span></span><br><span class="line"><span class="comment"> * 数据库中每条日志信息封装到一个SysLog对象中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;SysLog&gt; <span class="title">findPageObjects</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      @Param(<span class="string">"username"</span>)</span>String  username,</span></span><br><span class="line"><span class="function">      @<span class="title">Param</span><span class="params">(<span class="string">"startIndex"</span>)</span>Integer startIndex,</span></span><br><span class="line"><span class="function">      @<span class="title">Param</span><span class="params">(<span class="string">"pageSize"</span>)</span>Integer pageSize)</span>;</span><br></pre></td></tr></table></figure>说明：<br>1)  当DAO中方法参数多余一个时尽量使用@Param注解进行修饰并指定名字，然后在Mapper文件    中 便可以通过类似#{username}方式进行获取，否则只能通过#{arg0}，#{arg1}或者#{param1}，#{param2}等方式进行获取。<br>2) 当DAO方法中的参数应用在动态SQL中时无论多少个参数，尽量使用@Param注解进行修饰并定义。<h3 id="Mapper文件实现"><a href="#Mapper文件实现" class="headerlink" title="Mapper文件实现"></a>Mapper文件实现</h3></li><li>业务描述及设计实现<br>基于Dao接口创建映射文件，在此文件中通过相关元素(例如select)描述要执行的数据操作</li><li>关键代码设计及实现<br>第一步：在映射文件的设计目录(mapper/sys)中添加SysLogMapper.xml映射文件，代码如下：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">  <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.cy.pj.sys.dao.SysLogDao"</span>&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>第二步：在映射文件中添加sql元素实现，SQL中的共性操作，代码如下<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;sql id="queryWhereId"&gt;</span><br><span class="line">         from sys_Logs</span><br><span class="line">          &lt;where&gt;</span><br><span class="line">            &lt;if test="username!=null and username!=''"&gt;</span><br><span class="line">               username like concat("%",<span class="comment">#&#123;username&#125;,"%")</span></span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">          &lt;/where&gt;</span><br><span class="line">    &lt;/sql&gt;</span><br></pre></td></tr></table></figure>第三步：在映射文件中添加id为getRowCount元素，按条件统计记录总数，<br>代码如下：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getRowCount"</span></span><br><span class="line">           resultType=<span class="string">"int"</span>&gt;</span><br><span class="line">         <span class="function">select <span class="title">count</span><span class="params">(*)</span> </span></span><br><span class="line"><span class="function">         &lt;include refid</span>=<span class="string">"queryWhereId"</span>/&gt;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure>第四步：在映射文件中添加id为findPageObjects元素，实现分页查询。代码如下：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &lt;select id=<span class="string">"findPageObjects"</span></span><br><span class="line">            resultType=<span class="string">"com.cy.pj.sys.entity.SysLog"</span>&gt;</span><br><span class="line">         select *</span><br><span class="line">         &lt;include refid=<span class="string">"queryWhereId"</span>/&gt;</span><br><span class="line"> order by createdTime desc</span><br><span class="line">         limit #&#123;startIndex&#125;,#&#123;pageSize&#125;    </span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>第五步:单元测试类SysLogDaoTests，对数据层方法进行测试。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.pj.sys.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cy.pj.sys.entity.SysLog;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysLogDaoTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> SysLogDao sysLogDao;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetRowCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> rows=sysLogDao.getRowCount(<span class="string">"admin"</span>);</span><br><span class="line">   System.out.println(<span class="string">"rows="</span>+rows);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindPageObjects</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   List&lt;SysLog&gt; list=</span><br><span class="line">   sysLogDao.findPageObjects(<span class="string">"admin"</span>, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">   <span class="keyword">for</span>(SysLog log:list) &#123;</span><br><span class="line">   System.out.println(log);</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4Service接口及实现类"><a href="#3-3-4Service接口及实现类" class="headerlink" title="3.3.4Service接口及实现类"></a>3.3.4Service接口及实现类</h3></li><li>业务描述与设计实现<br>业务层主要是实现模块中业务逻辑的处理。在日志分页查询中，业务层对象首先要通过业务方法中的参数接收控制层数据(例如username,pageCurrent)并校验。然后基于用户名进行总记录数的查询并校验，再基于起始位置及页面大小进行当前页记录的查询，最后对查询结果进行封装并返回。</li><li>关键代码设计及实现<br>业务值对象定义，基于此对象封装数据层返回的数据以及计算的分页信息，具体代码参考如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.pj.common.vo;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageObject</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6780580291247550747L</span>;<span class="comment">//类泛型</span></span><br><span class="line">    <span class="comment">/**当前页的页码值*/</span></span><br><span class="line"> <span class="keyword">private</span> Integer pageCurrent=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**页面大小*/</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize=<span class="number">3</span>;</span><br><span class="line">    <span class="comment">/**总行数(通过查询获得)*/</span></span><br><span class="line">    <span class="keyword">private</span> Integer rowCount=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**总页数(通过计算获得)*/</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageCount=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**当前页记录*/</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; records;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PageObject</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PageObject</span><span class="params">(Integer pageCurrent, Integer pageSize, Integer rowCount, List&lt;T&gt; records)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.pageCurrent = pageCurrent;</span><br><span class="line"><span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line"><span class="keyword">this</span>.rowCount = rowCount;</span><br><span class="line"><span class="keyword">this</span>.records = records;</span><br><span class="line"><span class="comment">//this.pageCount=rowCount/pageSize;</span></span><br><span class="line"><span class="comment">//if(rowCount%pageSize!=0) &#123;</span></span><br><span class="line"><span class="comment">//pageCount++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">this</span>.pageCount=(rowCount-<span class="number">1</span>)/pageSize+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getPageCurrent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> pageCurrent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageCurrent</span><span class="params">(Integer pageCurrent)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pageCurrent = pageCurrent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> pageSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(Integer pageSize)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getRowCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rowCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRowCount</span><span class="params">(Integer rowCount)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.rowCount = rowCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getPageCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> pageCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageCount</span><span class="params">(Integer pageCount)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.pageCount = pageCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getRecords</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> records;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRecords</span><span class="params">(List&lt;T&gt; records)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.records = records;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>定义日志业务接口及方法，暴露外界对日志业务数据的访问，其代码参考如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.pj.sys.service;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysLogService</span> </span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> name 基于条件查询时的参数名</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> pageCurrent 当前的页码值</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span> 当前页记录+分页信息</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"> <span class="function">PageObject&lt;SysLog&gt; <span class="title">findPageObjects</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"> String username,</span></span></span><br><span class="line"><span class="function"><span class="params"> Integer pageCurrent)</span></span>;</span><br></pre></td></tr></table></figure>日志业务接口及实现类，用于具体执行日志业务数据的分页查询操作,其代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.pj.sys.service.impl;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysLogServiceImpl</span> <span class="keyword">implements</span> <span class="title">SysLogService</span></span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">     <span class="keyword">private</span> SysLogDao sysLogDao;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> PageObject&lt;SysLog&gt; <span class="title">findPageObjects</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  String name, Integer pageCurrent)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//1.验证参数合法性</span></span><br><span class="line">  <span class="comment">//1.1验证pageCurrent的合法性，</span></span><br><span class="line">  <span class="comment">//不合法抛出IllegalArgumentException异常</span></span><br><span class="line">  <span class="keyword">if</span>(pageCurrent==<span class="keyword">null</span>||pageCurrent&lt;<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"当前页码不正确"</span>);</span><br><span class="line">  <span class="comment">//2.基于条件查询总记录数</span></span><br><span class="line">  <span class="comment">//2.1) 执行查询</span></span><br><span class="line">  <span class="keyword">int</span> rowCount=sysLogDao.getRowCount(name);</span><br><span class="line">  <span class="comment">//2.2) 验证查询结果，假如结果为0不再执行如下操作</span></span><br><span class="line">  <span class="keyword">if</span>(rowCount==<span class="number">0</span>)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(<span class="string">"系统没有查到对应记录"</span>);</span><br><span class="line">  <span class="comment">//3.基于条件查询当前页记录(pageSize定义为2)</span></span><br><span class="line">  <span class="comment">//3.1)定义pageSize</span></span><br><span class="line">  <span class="keyword">int</span> pageSize=<span class="number">2</span>;</span><br><span class="line">  <span class="comment">//3.2)计算startIndex</span></span><br><span class="line">  <span class="keyword">int</span> startIndex=(pageCurrent-<span class="number">1</span>)*pageSize;</span><br><span class="line">  <span class="comment">//3.3)执行当前数据的查询操作</span></span><br><span class="line">  List&lt;SysLog&gt; records=</span><br><span class="line">  sysLogDao.findPageObjects(name, startIndex, pageSize);</span><br><span class="line">  <span class="comment">//4.对分页信息以及当前页记录进行封装</span></span><br><span class="line">  <span class="comment">//4.1)构建PageObject对象</span></span><br><span class="line">  PageObject&lt;SysLog&gt; pageObject=<span class="keyword">new</span> PageObject&lt;&gt;();</span><br><span class="line">  <span class="comment">//4.2)封装数据</span></span><br><span class="line">  pageObject.setPageCurrent(pageCurrent);</span><br><span class="line">  pageObject.setPageSize(pageSize);</span><br><span class="line">  pageObject.setRowCount(rowCount);</span><br><span class="line">  pageObject.setRecords(records);</span><br><span class="line">           pageObject.setPageCount((rowCount-<span class="number">1</span>)/pageSize+<span class="number">1</span>);</span><br><span class="line">  <span class="comment">//5.返回封装结果。</span></span><br><span class="line">  <span class="keyword">return</span> pageObject;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在当前方法中需要的ServiceException是一个自己定义的异常, 通过自定义异常可更好的实现对业务问题的描述，同时可以更好的提高用户体验。参考代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.pj.common.exception;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7793296502722655579L</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServiceException</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServiceException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(message);</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServiceException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(cause);</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>定义Service对象的单元测试类，代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.pj.sys.service;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cy.pj.common.vo.PageObject;</span><br><span class="line"><span class="keyword">import</span> com.cy.pj.sys.entity.SysLog;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysLogServiceTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SysLogService sysLogService;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindPageObjects</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   PageObject&lt;SysLog&gt; pageObject=</span><br><span class="line">   sysLogService.findPageObjects(<span class="string">"admin"</span>, <span class="number">1</span>);</span><br><span class="line">   System.out.println(pageObject);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-5Controller类实现"><a href="#3-3-5Controller类实现" class="headerlink" title="3.3.5Controller类实现"></a>3.3.5Controller类实现</h3></li><li>业务描述与设计实现<br>控制层对象主要负责请求和响应数据的处理，例如，本模块首先要通过控制层对象处理请求参数，然后通过业务层对象执行业务逻辑，再通过VO对象封装响应结果(主要对业务层数据添加状态信息)，最后将响应结果转换为JSON格式的字符串响应到客户端。</li><li>关键代码设计与实现<br>定义控制层值对象（VO），目的是基于此对象封装控制层响应结果(在此对象中主要是为业务层执行结果添加状态信息)。Spring MVC框架在响应时可以调用相关API（例如jackson）将其对象转换为JSON格式字符串。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.pj.common.vo;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonResult</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">856924038217431339L</span>;<span class="comment">//SysResult/Result/R</span></span><br><span class="line"><span class="comment">/**状态码*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> state=<span class="number">1</span>;<span class="comment">//1表示SUCCESS,0表示ERROR</span></span><br><span class="line"><span class="comment">/**状态信息*/</span></span><br><span class="line"><span class="keyword">private</span> String message=<span class="string">"ok"</span>;</span><br><span class="line"><span class="comment">/**正确数据*/</span></span><br><span class="line"><span class="keyword">private</span> Object data;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JsonResult</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JsonResult</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.message=message;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**一般查询时调用，封装查询结果*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JsonResult</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data=data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**出现异常时时调用*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JsonResult</span><span class="params">(Throwable t)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.state=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>.message=t.getMessage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.state = state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.message = message;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>定义Controller类，并将此类对象使用Spring框架中的@Controller注解进行标识，表示此类对象要交给Spring管理。然后基于@RequestMapping注解为此类定义根路径映射。代码参考如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.cy.pj.sys.controller;</span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/log/&quot;)</span><br><span class="line">public class SysLogController &#123;</span><br><span class="line">@Autowired</span><br><span class="line">private SysLogService sysLogService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在Controller类中添加分页请求处理方法，代码参考如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"doFindPageObjects"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">doFindPageObjects</span><span class="params">(String username,Integer pageCurrent)</span></span>&#123;</span><br><span class="line"> PageObject&lt;SysLog&gt; pageObject=</span><br><span class="line">sysLogService.findPageObjects(username,pageCurrent);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JsonResult(pageObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义全局异常处理类，对控制层可能出现的异常，进行统一异常处理，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.pj.common.web;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> com.cy.pj.common.vo.JsonResult;</span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"><span class="comment">//JDK中的自带的日志API</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(RuntimeException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">   @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">JsonResult</span> <span class="title">doHandleRuntimeException</span>(</span></span><br><span class="line"><span class="class"><span class="title">RuntimeException</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">    e.printStackTrace();<span class="comment">//也可以写日志</span></span><br><span class="line">异常信息</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JsonResult(e);<span class="comment">//封装</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端关键业务及代码实现"><a href="#客户端关键业务及代码实现" class="headerlink" title="客户端关键业务及代码实现"></a>客户端关键业务及代码实现</h2><h3 id="日志列表信息呈现"><a href="#日志列表信息呈现" class="headerlink" title="日志列表信息呈现"></a>日志列表信息呈现</h3><ul><li>业务描述与设计实现<br>日志分页页面加载完成以后，向服务端发起异步请求加载日志信息，当日志信息加载完成需要将日志信息、分页信息呈现到列表页面上。</li><li>关键代码设计与实现<br>第一步：分页页面加载完成，向服务端发起异步请求，代码参考如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> $(function()&#123;</span><br><span class="line">   <span class="comment">//为什么要将doGetObjects函数写到load函数对应的回调内部。</span></span><br><span class="line">   $(<span class="string">"#pageId"</span>).load(<span class="string">"doPageUI"</span>,function()&#123;</span><br><span class="line">   doGetObjects();</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>第二步：定义异步请求处理函数，代码参考如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">doGetObjects</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">//debugger;//断点调试</span></span><br><span class="line">   <span class="comment">//1.定义url和参数</span></span><br><span class="line">   <span class="keyword">var</span> url=<span class="string">"log/doFindPageObjects"</span></span><br><span class="line">   <span class="keyword">var</span> params=&#123;<span class="string">"pageCurrent"</span>:<span class="number">1</span>&#125;;<span class="comment">//pageCurrent=2</span></span><br><span class="line">   <span class="comment">//2.发起异步请求</span></span><br><span class="line">   <span class="comment">//请问如下ajax请求的回调函数参数名可以是任意吗？//可以,必须符合标识符的规范</span></span><br><span class="line">       $.getJSON(url,params,function(result)&#123;</span><br><span class="line">   <span class="comment">//请问result是一个字符串还是json格式的js对象？对象</span></span><br><span class="line">         doHandleQueryResponseResult(result);</span><br><span class="line"> &#125;</span><br><span class="line">   );<span class="comment">//特殊的ajax函数</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>第三步：定义回调函数，处理服务端的响应结果。代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function doHandleQueryResponseResult (result)&#123; //JsonResult</span><br><span class="line">   if(result.state==1)&#123;//ok</span><br><span class="line">//更新table中tbody内部的数据</span><br><span class="line">doSetTableBodyRows(result.data.records);//将数据呈现在页面上 </span><br><span class="line">//更新页面page.html分页数据</span><br><span class="line">//doSetPagination(result.data); //此方法写到page.html中</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">alert(result.message);</span><br><span class="line">    &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>第四步：将异步响应结果呈现在table的tbody位置。代码参考如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">doSetTableBodyRows</span><span class="params">(records)</span></span>&#123;</span><br><span class="line">   <span class="comment">//1.获取tbody对象，并清空对象</span></span><br><span class="line">   <span class="keyword">var</span> tBody=$(<span class="string">"#tbodyId"</span>);</span><br><span class="line">   tBody.empty();</span><br><span class="line">   <span class="comment">//2.迭代records记录，并将其内容追加到tbody</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i in records)&#123;</span><br><span class="line">   <span class="comment">//2.1 构建tr对象</span></span><br><span class="line">   <span class="keyword">var</span> tr=$(<span class="string">"&lt;tr&gt;&lt;/tr&gt;"</span>);</span><br><span class="line">   <span class="comment">//2.2 构建tds对象</span></span><br><span class="line">   <span class="keyword">var</span> tds=doCreateTds(records[i]);</span><br><span class="line">   <span class="comment">//2.3 将tds追加到tr中</span></span><br><span class="line">   tr.append(tds);</span><br><span class="line">   <span class="comment">//2.4 将tr追加到tbody中</span></span><br><span class="line">   tBody.append(tr);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>第五步：创建每行中的td元素，并填充具体业务数据。代码参考如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function">function <span class="title">doCreateTds</span><span class="params">(data)</span></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> tds=<span class="string">"&lt;td&gt;&lt;input type='checkbox' class='cBox' name='cItem' value='"</span>+data.id+<span class="string">"'&gt;&lt;/td&gt;"</span>+</span><br><span class="line">     <span class="string">"&lt;td&gt;"</span>+data.username+<span class="string">"&lt;/td&gt;"</span>+</span><br><span class="line">     <span class="string">"&lt;td&gt;"</span>+data.operation+<span class="string">"&lt;/td&gt;"</span>+</span><br><span class="line">     <span class="string">"&lt;td&gt;"</span>+data.method+<span class="string">"&lt;/td&gt;"</span>+</span><br><span class="line">     <span class="string">"&lt;td&gt;"</span>+data.params+<span class="string">"&lt;/td&gt;"</span>+</span><br><span class="line">     <span class="string">"&lt;td&gt;"</span>+data.ip+<span class="string">"&lt;/td&gt;"</span>+</span><br><span class="line">     <span class="string">"&lt;td&gt;"</span>+data.time+<span class="string">"&lt;/td&gt;"</span>;   </span><br><span class="line"><span class="keyword">return</span> tds;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="分页数据信息呈现"><a href="#分页数据信息呈现" class="headerlink" title="分页数据信息呈现"></a>分页数据信息呈现</h3></li><li>业务描述与设计实现<br>日志信息列表初始化完成以后初始化分页数据（调用setPagination函数），然后再点击上一页，下一页等操作时，更新页码值，执行基于当前页码值的查询。</li><li>关键代码设计与实现：<br>第一步：在page.html页面中定义doSetPagination方法(实现分页数据初始化)，代码如下<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">doSetPagination</span><span class="params">(page)</span></span>&#123;</span><br><span class="line">   <span class="comment">//1.始化数据</span></span><br><span class="line">   $(<span class="string">".rowCount"</span>).html(<span class="string">"总记录数("</span>+page.rowCount+<span class="string">")"</span>);</span><br><span class="line">   $(<span class="string">".pageCount"</span>).html(<span class="string">"总页数("</span>+page.pageCount+<span class="string">")"</span>);</span><br><span class="line">   $(<span class="string">".pageCurrent"</span>).html(<span class="string">"当前页("</span>+page.pageCurrent+<span class="string">")"</span>);</span><br><span class="line">   <span class="comment">//2.绑定数据(为后续对此数据的使用提供服务)</span></span><br><span class="line">   $(<span class="string">"#pageId"</span>).data(<span class="string">"pageCurrent"</span>,page.pageCurrent);</span><br><span class="line">   $(<span class="string">"#pageId"</span>).data(<span class="string">"pageCount"</span>,page.pageCount);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>第二步：分页页面page.html中注册点击事件。代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">    <span class="comment">//事件注册</span></span><br><span class="line">     $(<span class="string">"#pageId"</span>).on(<span class="string">"click"</span>,<span class="string">".first,.pre,.next,.last"</span>,doJumpToPage);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>第三步：定义doJumpToPage方法(通过此方法实现当前数据查询)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> function doJumpToPage()&#123;</span><br><span class="line">        //1.获取点击对象的class值</span><br><span class="line">        var cls=$(this).prop(&quot;class&quot;);//Property</span><br><span class="line">        //2.基于点击的对象执行pageCurrent值的修改</span><br><span class="line">        //2.1获取pageCurrent,pageCount的当前值</span><br><span class="line">        var pageCurrent=$(&quot;#pageId&quot;).data(&quot;pageCurrent&quot;);</span><br><span class="line">        var pageCount=$(&quot;#pageId&quot;).data(&quot;pageCount&quot;);</span><br><span class="line">        //2.2修改pageCurrent的值</span><br><span class="line">        if(cls==&quot;first&quot;)&#123;//首页</span><br><span class="line">        pageCurrent=1;</span><br><span class="line">        &#125;else if(cls==&quot;pre&quot;&amp;&amp;pageCurrent&gt;1)&#123;//上一页</span><br><span class="line">        pageCurrent--;</span><br><span class="line">        &#125;else if(cls==&quot;next&quot;&amp;&amp;pageCurrent&lt;pageCount)&#123;//下一页</span><br><span class="line">        pageCurrent++;</span><br><span class="line">        &#125;else if(cls==&quot;last&quot;)&#123;//最后一页</span><br><span class="line">        pageCurrent=pageCount;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">         return;</span><br><span class="line">&#125;</span><br><span class="line">        //3.对pageCurrent值进行重新绑定</span><br><span class="line">        $(&quot;#pageId&quot;).data(&quot;pageCurrent&quot;,pageCurrent);</span><br><span class="line">        //4.基于新的pageCurrent的值进行当前页数据查询</span><br><span class="line">        doGetObjects();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>修改分页查询方法:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">doGetObjects</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">//debugger;//断点调试</span></span><br><span class="line">   <span class="comment">//1.定义url和参数</span></span><br><span class="line">   <span class="keyword">var</span> url=<span class="string">"log/doFindPageObjects"</span></span><br><span class="line">   <span class="comment">//? 请问data函数的含义是什么？(从指定元素上获取绑定的数据)</span></span><br><span class="line">   <span class="comment">//此数据会在何时进行绑定？(setPagination,doQueryObjects)</span></span><br><span class="line">   <span class="keyword">var</span> pageCurrent=$(<span class="string">"#pageId"</span>).data(<span class="string">"pageCurrent"</span>);</span><br><span class="line">   <span class="comment">//为什么要执行如下语句的判定，然后初始化pageCurrent的值为1</span></span><br><span class="line">   <span class="comment">//pageCurrent参数在没有赋值的情况下，默认初始值应该为1.</span></span><br><span class="line">   <span class="keyword">if</span>(!pageCurrent) pageCurrent=<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">var</span> params=&#123;<span class="string">"pageCurrent"</span>:pageCurrent&#125;;<span class="comment">//pageCurrent=2</span></span><br><span class="line">   <span class="comment">//2.发起异步请求</span></span><br><span class="line">   <span class="comment">//请问如下ajax请求的回调函数参数名可以是任意吗？可以,必须符合标识符的规范</span></span><br><span class="line">       $.getJSON(url,params,function(result)&#123;</span><br><span class="line">   <span class="comment">//请问result是一个字符串还是json格式的js对象？对象</span></span><br><span class="line">            doHandleQueryResponseResult(result);</span><br><span class="line"> &#125;</span><br><span class="line">   );<span class="comment">//特殊的ajax函数 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-4列表页面信息查询实现"><a href="#3-4-4列表页面信息查询实现" class="headerlink" title="3.4.4列表页面信息查询实现"></a>3.4.4列表页面信息查询实现</h3></li><li>业务描述及设计<br>当用户点击日志列表的查询按钮时，基于用户输入的用户名进行有条件的分页查询，并将查询结果呈现在页面。</li><li>关键代码设计与实现：<br>第一步：日志列表页面加载完成，在查询按钮上进行事件注册。代码如下：<br>  $(“.input-group-btn”).on(“click”,”.btn-search”,doQueryObjects)<br>第二步：定义查询按钮对应的点击事件处理函数。代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">doQueryObjects</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">//为什么要在此位置初始化pageCurrent的值为1?</span></span><br><span class="line">   <span class="comment">//数据查询时页码的初始位置也应该是第一页</span></span><br><span class="line">   $(<span class="string">"#pageId"</span>).data(<span class="string">"pageCurrent"</span>,<span class="number">1</span>);</span><br><span class="line">   <span class="comment">//为什么要调用doGetObjects函数？</span></span><br><span class="line">   <span class="comment">//重用js代码，简化jS代码编写。</span></span><br><span class="line">   doGetObjects();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>第三步：在分页查询函数中追加name参数定义(看黄色底色部分)，代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">doGetObjects</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">//debugger;//断点调试</span></span><br><span class="line">   <span class="comment">//1.定义url和参数</span></span><br><span class="line">   <span class="keyword">var</span> url=<span class="string">"log/doFindPageObjects"</span></span><br><span class="line">   <span class="comment">//? 请问data函数的含义是什么？(从指定元素上获取绑定的数据)</span></span><br><span class="line">   <span class="comment">//此数据会在何时进行绑定？(setPagination,doQueryObjects)</span></span><br><span class="line">   <span class="keyword">var</span> pageCurrent=$(<span class="string">"#pageId"</span>).data(<span class="string">"pageCurrent"</span>);</span><br><span class="line">   <span class="comment">//为什么要执行如下语句的判定，然后初始化pageCurrent的值为1</span></span><br><span class="line">   <span class="comment">//pageCurrent参数在没有赋值的情况下，默认初始值应该为1.</span></span><br><span class="line">   <span class="keyword">if</span>(!pageCurrent) pageCurrent=<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">var</span> params=&#123;<span class="string">"pageCurrent"</span>:pageCurrent&#125;;</span><br><span class="line">   <span class="comment">//为什么此位置要获取查询参数的值?</span></span><br><span class="line">   <span class="comment">//一种冗余的应用方法，目的时让此函数在查询时可以重用。</span></span><br><span class="line">   <span class="keyword">var</span> username=$(<span class="string">"#searchNameId"</span>).val();</span><br><span class="line">   <span class="comment">//如下语句的含义是什么？动态在json格式的js对象中添加key/value,</span></span><br><span class="line">   <span class="keyword">if</span>(username) params.username=username;<span class="comment">//查询时需要</span></span><br><span class="line">   <span class="comment">//2.发起异步请求</span></span><br><span class="line">   <span class="comment">//请问如下ajax请求的回调函数参数名可以是任意吗？可以,必须符合标识符的规范</span></span><br><span class="line">       $.getJSON(url,params,function(result)&#123;</span><br><span class="line">   <span class="comment">//请问result是一个字符串还是json格式的js对象？对象</span></span><br><span class="line">            doHandleQueryResponseResult(result);</span><br><span class="line"> &#125;</span><br><span class="line">   );</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-日志管理设计说明&quot;&gt;&lt;a href=&quot;#1-日志管理设计说明&quot; class=&quot;headerlink&quot; title=&quot;1 日志管理设计说明&quot;&gt;&lt;/a&gt;1 日志管理设计说明&lt;/h1&gt;&lt;h2 id=&quot;1-1-业务设计说明&quot;&gt;&lt;a href=&quot;#1-1-业务设计说明&quot; class=&quot;headerlink&quot; title=&quot;1.1 业务设计说明&quot;&gt;&lt;/a&gt;1.1 &lt;strong&gt;业务设计说明&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt; 本模块主要是实现对用户行为日志(例如谁在什么时间点执行了什么操作,访问了哪些方法,传递的什么参数,执行时长等)进行记录、查询、删除等操作。其表设计语句如下：&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python基础</title>
    <link href="http://yoursite.com/2020/02/24/Python%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/02/24/Python基础/</id>
    <published>2020-02-23T21:43:03.000Z</published>
    <updated>2020-07-16T02:07:52.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h1><p>概述：</p><p>​    解释型的面向对象语言</p><p>需要使用一个专门的解释器翻译成机器语言，执行一次翻译一次</p><a id="more"></a><p>java   C </p><p>编译型语言：需要专门的编译器把高级语言编译成可执行文件，只需要编译一次。程序执行效率比较高</p><p>优点：</p><p>1 面向对象语言 </p><p>2 免费  开源</p><p>3 可移植(win   linux  mac)</p><p>4 可扩展性</p><p>5 可以混合编程</p><p>6 应用广泛</p><p>​    爬虫   web  人工智能  大数据(轻量级)   数据分析   算法   游戏  图像音频处理   教育  </p><p>7 简单易学   开发效率高   维护成本比较低</p><p>缺点：</p><p>相比与C   c++  java  等执行速度不够快</p><h4 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h4><p>略</p><h4 id="语法规范："><a href="#语法规范：" class="headerlink" title="语法规范："></a>语法规范：</h4><p>单行注释   在行首添加  #号     快捷键： ctrl + ?</p><p>多行注释： ‘’’  ‘’’     “””   “”” 三单或三双引号进行多行注释</p><p>缩进：默认4个英文空格符   使用快捷键tab   向右缩进</p><p>​        向左缩进  shift + tab</p><h4 id="输入输出语句"><a href="#输入输出语句" class="headerlink" title="输入输出语句"></a>输入输出语句</h4><p>input </p><p>print</p><p>print(val, val2, val3 )</p><h4 id="基本的数据类型"><a href="#基本的数据类型" class="headerlink" title="基本的数据类型"></a>基本的数据类型</h4><h5 id="数字类型（整型-浮点型-复数）"><a href="#数字类型（整型-浮点型-复数）" class="headerlink" title="数字类型（整型   浮点型   复数）"></a>数字类型（整型   浮点型   复数）</h5><p>整型  int</p><p>浮点型  float </p><p>复数 </p><p>虚部使用j表示</p><p>格式： a + bj</p><p>示例：</p><p>5 + 6j   </p><h5 id="基本的运算符"><a href="#基本的运算符" class="headerlink" title="基本的运算符"></a>基本的运算符</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+  -  *   /    %   **（幂运算）  //（取整）</span><br></pre></td></tr></table></figure><p>除法：返回值为浮点型</p><p>取整：得到的数去掉小数向下取整(向左取整)</p><p>幂运算： **</p><h5 id="查看数据类型"><a href="#查看数据类型" class="headerlink" title="查看数据类型"></a>查看数据类型</h5><p>type()方法</p><p>查看某个对象的数据类型<br>isinstance(obj, type)</p><p>用来判断某个对象是不是对应的类型，是则返回True  否则返回False</p><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><p>用来表示真和假两种状态，对应的值有两种 True   False</p><p>True + False  = ?  1</p><p>True + True = ?  2</p><p>True 表示真可以用1来表示</p><p>False 表示假可以用0表示</p><h4 id="空值-None"><a href="#空值-None" class="headerlink" title="空值 (None)"></a>空值 (None)</h4><p>表示不存在的一个特殊对象</p><p>作用：用来占位  用来解除变量的绑定关系</p><h5 id="pow-函数"><a href="#pow-函数" class="headerlink" title="pow()函数"></a>pow()函数</h5><p>表示：</p><p>pow(x, y, z=None)</p><p>对x进行y次方在对z求余</p><p>x ** y % z </p><p>如果不给z赋值则对应表达式为</p><p>x ** y</p><p>i = 2.3</p><p>j = int(i)</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>用来绑定一个数据对象的标识符</p><p>标识符命名的规则：</p><p>由数字  字母  下划线组成的符号</p><p>不能以数字开头</p><p>严格区分大小写</p><p>必须能见名知意</p><p>不能使用python的关键字</p><p>查看python的关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line">print(keyword.kwlist)</span><br></pre></td></tr></table></figure><h5 id="驼峰命名法"><a href="#驼峰命名法" class="headerlink" title="驼峰命名法"></a>驼峰命名法</h5><p>下划线命名法：</p><p>单词间可以使用下划线连接</p><h4 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h4><p>格式：</p><p>变量名 = 表达式(一个数字或者数字和运算符组成的式子)</p><p>作用：</p><p>1 没有此变量是，创建一个变量，绑定到表达式</p><p>2 变量存在时，改变变量的绑定关系</p><p>说明：</p><p>1 使用变量前需先赋值</p><p>2 一个变量只能绑定在一个对象上</p><p>a = 10</p><p>3 一个对象可以关联多个变量</p><p>b = 10   c = 10</p><h5 id="序列赋值语法："><a href="#序列赋值语法：" class="headerlink" title="序列赋值语法："></a>序列赋值语法：</h5><p>格式</p><p>变量1, 变量2, 变量3, … = 对象1，对象2，对象3，…</p><h4 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h4><p>格式： del 变量名</p><h4 id="常用的运算符"><a href="#常用的运算符" class="headerlink" title="常用的运算符"></a>常用的运算符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &lt;  == !=  &lt;=  &gt;=</span><br></pre></td></tr></table></figure><p>返回值类型为布尔类型</p><h5 id="链式比较："><a href="#链式比较：" class="headerlink" title="链式比较："></a>链式比较：</h5><p>格式：</p><p>val 比较运算符 val2 比较运算符1 val3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="number">1</span> &lt; a &lt; <span class="number">60</span></span><br></pre></td></tr></table></figure><h5 id="复合运算符"><a href="#复合运算符" class="headerlink" title="复合运算符"></a>复合运算符</h5><p>y += 1    y = y + 1</p><p>x -= 1</p><p>z *= 2</p><h5 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h5><p>not  （布尔取非)</p><p>and   （布尔与)    x and y</p><p>or(布尔或)  x or y </p><h4 id="is-与-is-not运算符"><a href="#is-与-is-not运算符" class="headerlink" title="is 与 is not运算符"></a>is 与 is not运算符</h4><p>作用：判断两个变量(对象)是否绑定同一个对象</p><p>依据：通过两个变量的id地址来判断</p><p>语法：</p><p>x is y     x is not y</p><p>-6    -5    0    255    256   257</p><p>-5~256之间的整数都是在电脑中固定位置，不需要单独开辟新的地址存储</p><p>范围以外的整数咋使用时都会在内存中开辟一个新的空间，多次创建则每次开辟一个不同的空间</p><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>作用：根据条件选择性的执行某条语句或者语句块</p><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 真值表达式:</span><br><span class="line">语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句块<span class="number">2</span></span><br></pre></td></tr></table></figure><p>练习：</p><p>使用input语句随便输入一个数字判断输入的数字的奇偶性。</p><p><strong>在python中字符串不能和数字做加减运算，如需要运算必须转换类型。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i = int(input(&quot;请输入一个整数&quot;))</span><br><span class="line">print(type(i))</span><br><span class="line">if i % 2 == 0:</span><br><span class="line">    print(i,&apos;是偶数&apos;)</span><br><span class="line">else:</span><br><span class="line">    print(i,&quot;是奇数&quot;)</span><br></pre></td></tr></table></figure><p>语法2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 真值表达式<span class="number">1</span>:</span><br><span class="line">语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 真值表达式<span class="number">2</span>:</span><br><span class="line">语句块<span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句块n</span><br></pre></td></tr></table></figure><p>说明：</p><p>else子句最多有1个或没有</p><p>elif子句可以不写也可以写多个</p><p>执行顺序先判断真值表达式1是否为真，为真则执行语句块1并结束if语句，为假时判断真值表达式2是否为真，为真执行语句块2，以此类推当所有的真值表达式都不满足时才执行else子句。</p><p>练习：</p><p>出租车计价：</p><p>起步价 8元</p><p>公里数大于5小于10时每公里4元</p><p>公里数大于10时超出部分每公里6元。</p><p>使用input输入一个公里数，最终输出一个应付金额。</p><h5 id="if嵌套"><a href="#if嵌套" class="headerlink" title="if嵌套"></a>if嵌套</h5><p>if语句可以嵌套一个新的if语句在内部</p><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i = int(input(<span class="string">"请输入一个数字"</span>))</span><br><span class="line"><span class="keyword">if</span> i &gt; <span class="number">10</span>:</span><br><span class="line"><span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">print(i,<span class="string">"大于10并且是偶数"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(i,<span class="string">"小于10"</span>)</span><br></pre></td></tr></table></figure><h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><h4 id="输入输出语句-1"><a href="#输入输出语句-1" class="headerlink" title="输入输出语句"></a>输入输出语句</h4><p>input  输入的对象为字符串类型，如需要改变类型需强制转换</p><p>print() 当输出的值有多个时(大于等于2)我们可以使用sep参数改变输出结果之间的连接符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">print(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,sep=<span class="string">"#"</span>)</span><br></pre></td></tr></table></figure><p>快捷键：</p><p>注释：ctrl + ?</p><p>缩进： tab</p><p>​        向左缩进 shift + tab</p><p>运行文件：</p><p>​        ctrl + shift + F10</p><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+  -  *   /   %  </span><br><span class="line">**   //</span><br></pre></td></tr></table></figure><h4 id="复合运算符-1"><a href="#复合运算符-1" class="headerlink" title="复合运算符"></a>复合运算符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+=   -=   *=  /= ....</span><br></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt;=   &lt;   &lt;=   ==  !=   ===</span><br></pre></td></tr></table></figure><h4 id="链式比较符"><a href="#链式比较符" class="headerlink" title="链式比较符"></a>链式比较符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 &lt; 5 &lt; 8</span><br></pre></td></tr></table></figure><h4 id="is-is-not运算符"><a href="#is-is-not运算符" class="headerlink" title="is  is not运算符"></a>is  is not运算符</h4><p>-5 ~ 256之间的整数 用is判断是返回结果为True</p><h4 id="type-查看对象的类型"><a href="#type-查看对象的类型" class="headerlink" title="type() 查看对象的类型"></a>type() 查看对象的类型</h4><h4 id="isinstance-判断对象是否为某个给定的类型，是返回True"><a href="#isinstance-判断对象是否为某个给定的类型，是返回True" class="headerlink" title="isinstance  判断对象是否为某个给定的类型，是返回True"></a>isinstance  判断对象是否为某个给定的类型，是返回True</h4><h4 id="基本的数据类型-1"><a href="#基本的数据类型-1" class="headerlink" title="基本的数据类型"></a>基本的数据类型</h4><h5 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h5><p>int  float  复数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6 + 6j</span><br><span class="line">6 + 6 * j  #错误</span><br></pre></td></tr></table></figure><h4 id="布尔类型："><a href="#布尔类型：" class="headerlink" title="布尔类型："></a>布尔类型：</h4><p>只有两个值表示真假，True   和  False</p><h4 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and   or    not</span><br></pre></td></tr></table></figure><h4 id="if语句-1"><a href="#if语句-1" class="headerlink" title="if语句"></a>if语句</h4><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 真值表达式<span class="number">1</span>:</span><br><span class="line">语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 真值表达式<span class="number">2</span>：</span><br><span class="line">语句块<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> 真值表达式<span class="number">3</span>：</span><br><span class="line">语句块<span class="number">3</span></span><br><span class="line">。。。</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句块n</span><br></pre></td></tr></table></figure><p>说明：</p><p>elif子句可以不写，也可以写多个</p><p>else子句可以省略不写，写的话做多写一个</p><p>if语句的嵌套</p><p>练习：</p><p>去超市买蔬菜：</p><p>使用input输入是否为会员</p><p>输入买了多少斤</p><p>会员价： 3.68元</p><p>非会员： 4元</p><p>最终输入应付金额</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = input(<span class="string">"是否为会员"</span>)</span><br><span class="line">j = float(input(<span class="string">"请输入购买的斤数:"</span>))</span><br><span class="line"><span class="comment"># # if s == "是":</span></span><br><span class="line"><span class="comment"># #     print(3.68 * j)</span></span><br><span class="line"><span class="comment"># # elif s == "否":</span></span><br><span class="line"><span class="comment"># #     print(4 * j)</span></span><br><span class="line"><span class="comment"># # else:</span></span><br><span class="line"><span class="comment"># #     print("输入有误！")</span></span><br></pre></td></tr></table></figure><h2 id="day02"><a href="#day02" class="headerlink" title="day02"></a>day02</h2><h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><p>语法：</p><p>表达式1 if 真值表达式 else 真值表达式2</p><p>作用：</p><p>根据真值表达式返回结果选择性的表达式1或表达式2，并返回结果</p><p>运行：</p><p>先判断真值表达式是否为真，为真执行表达式1，否则执行表达式2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = input(<span class="string">"是否为会员"</span>)</span><br><span class="line">j = float(input(<span class="string">"请输入购买的斤数:"</span>))</span><br><span class="line">print(<span class="number">3.68</span> * j <span class="keyword">if</span> s == <span class="string">"是"</span> <span class="keyword">else</span> <span class="number">4</span> * j)</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>作用：用来记录文本信息</p><p>表示方法：</p><p>使用引号将内容括起来，可以是单引号  ‘  ‘   双引号 “  ”   三单引号‘’‘  ’‘’</p><p>三双引号 “””  “””</p><p>说明：</p><p>单引号中可以存在双引号，双引号不作为字符串的结束符</p><p>双引号中可以存在单引号，。。。。(同上)</p><p>如果想要一个字符串输出格式为：</p><p>白日依山尽</p><p>黄河入海流</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"白日依山尽\n黄河入海流"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"""白日依山尽</span></span><br><span class="line"><span class="string">黄河入海流"""</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p>三单/双引号字符串内容如果需要换行时，直接按回车键换行不需要使用换行符，最终输出结果会在回车键处自动换行。</p><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><p>字符串的字面值表示中用反斜杠\后跟一些字符来代表特殊字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>符号</th><th>描述</th><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>\‘</td><td>代表一个单引号</td><td>\“</td><td>代表一个双引号</td></tr><tr><td>\n</td><td>换行符</td><td>\\</td><td>代表一个反斜杠</td></tr><tr><td>\r</td><td>返回光标至首行</td><td>\t</td><td>水平制表符</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">1</span> end=<span class="string">"\t"</span>)</span><br><span class="line">print(<span class="number">2</span> end=<span class="string">"\t"</span>)</span><br><span class="line">print(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>补充：</p><p>print(val,val2,sep=” “, end=”\n”)</p><p>end参数默认为换行符，表示的为与输出后与下一次输出的连接符。</p><p>问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如何：让print(&quot;\\\\\\&quot;)输出结果为\\\\\\而不是\\\</span><br></pre></td></tr></table></figure><p>解决办法：</p><p>raw字符串(原始字符串)</p><p>格式：</p><p>r”字符串内容” </p><p>作用：让转义符无效(显示原始的字符串内容)</p><h4 id="比较运算符："><a href="#比较运算符：" class="headerlink" title="比较运算符："></a>比较运算符：</h4><p>符号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==     !=   &gt;  &gt;=   &lt;  &lt;=</span><br></pre></td></tr></table></figure><p>依据字符串的Unicode编码值依次进行比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abd'</span>&gt;<span class="string">"abc"</span>  <span class="comment">#True</span></span><br></pre></td></tr></table></figure><p>函数：</p><p>ord(x) 返回一个字符的Unicode编码值</p><p>chr(i) 返回Unicode编码值对应的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(ord(&quot;d&quot;))</span><br><span class="line">print(ord(&quot;c&quot;))</span><br><span class="line">print(chr(100))</span><br></pre></td></tr></table></figure><p>is  is not</p><h4 id="in-not-in运算符"><a href="#in-not-in运算符" class="headerlink" title="in  /    not in运算符"></a>in  /    not in运算符</h4><p>作用：</p><p>判断某个字符或字符串是否存在于另一个字符串中(序列)，如果存在返回True否则返回False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'2'</span> <span class="keyword">in</span> <span class="string">'123'</span> <span class="comment">#True</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">in</span> <span class="string">"abc56"</span>  <span class="comment">#错误示例</span></span><br><span class="line"><span class="string">"ac"</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">"abc"</span>  <span class="comment">#True</span></span><br><span class="line"><span class="string">'ac'</span> <span class="keyword">in</span> <span class="string">"abc"</span>  <span class="comment"># False</span></span><br><span class="line"><span class="string">"I'm"</span> <span class="keyword">in</span> <span class="string">"I'm ...."</span> <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h4 id="运算符-1"><a href="#运算符-1" class="headerlink" title="运算符"></a>运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+    *    +=   *=</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+</span><br><span class="line">字符串的拼接</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>   <span class="string">"abc"</span> + <span class="string">"def"</span>   <span class="comment">#"abcdef"</span></span><br><span class="line"><span class="number">2</span>  <span class="string">'ab'</span> * <span class="string">"e"</span>   <span class="comment">#错误，字符串做乘法运算的时候其后必须乘以正整数</span></span><br><span class="line"><span class="number">3</span>   <span class="string">"a"</span> * <span class="number">6</span>  <span class="comment">#"aaaaaa"</span></span><br><span class="line"><span class="number">4</span>   <span class="string">"a"</span> + <span class="number">6</span>  <span class="comment">#错误不能直接和数字做加运算</span></span><br><span class="line"><span class="string">"a"</span> + str(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    s = <span class="string">"a"</span></span><br><span class="line"><span class="number">5</span>   s+= <span class="string">"bc"</span>  <span class="string">"abc"</span></span><br><span class="line"><span class="number">6</span>   s *= <span class="number">3</span>     <span class="string">"abcabcabc"</span></span><br></pre></td></tr></table></figure><h4 id="字符串的构造函数"><a href="#字符串的构造函数" class="headerlink" title="字符串的构造函数"></a>字符串的构造函数</h4><p>str()</p><p>用来将一个对象强制转换为字符串类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">6</span> </span><br><span class="line">print(type(a))  <span class="comment"># int</span></span><br><span class="line">print(type(str(<span class="number">6</span>)))  <span class="comment"># str</span></span><br></pre></td></tr></table></figure><h4 id="字符串的索引操作"><a href="#字符串的索引操作" class="headerlink" title="字符串的索引操作"></a>字符串的索引操作</h4><p>格式：字符串[整数表达式]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;abcde&quot;</span><br><span class="line">s[0]  # &apos;a&apos;</span><br><span class="line">s[-1] # &apos;e&apos;</span><br></pre></td></tr></table></figure><p>说明：</p><p>1 字符串(序列)可以通过索引(index)去访问序列中的对象</p><p>2 正向索引第一个元素对应的下标为0，第二个为1，一次类推；反向索引时最后一个元素对象下标为-1，倒数第二个对应下标为-2，以此类推</p><table><thead><tr><th>字符串</th><th>a</th><th>b</th><th>c</th><th>d</th><th>e</th></tr></thead><tbody><tr><td>正向索引下标</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>反向索引下标</td><td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr></tbody></table><h4 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h4><p>格式：</p><p>S[start : stop : step]</p><p>S[: stop]  从序列开头切到stop但不包含stop下标对应的元素</p><p>S[::] 从头切到尾</p><p>S[start : ] 从起始位置切到结束 </p><p>start : 切片的开始点</p><p>stop: 切片的终止点，但是不包含该小标对应的元素切不到</p><p>stop：步长，默认为1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;abcdef&quot;</span><br><span class="line">&apos;ace&apos;</span><br><span class="line">s[0:5:2]  s[0:6:2]</span><br><span class="line"></span><br><span class="line">#能否切出如下结果&quot;fedcba&quot;</span><br></pre></td></tr></table></figure><p>回文：正向读与反向对时一样</p><p>上海自来水来自海上</p><p>使用input输入一段内容判断输入内容是否为回文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = input(<span class="string">"请输入一段文字"</span>)</span><br><span class="line"><span class="keyword">if</span> s == s[::<span class="number">-1</span>]:</span><br><span class="line">print(s,<span class="string">'是回文'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"不是回文"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = <span class="string">"刘备张飞关羽"</span>  使用切片获取三人的姓  <span class="comment">#names[::2]</span></span><br><span class="line">s = 'abcdefg'   --&gt; "cde"  s[2:5]</span><br><span class="line">            --&gt;  "bdg"   #错误无法用切片实现</span><br><span class="line">            --&gt;  "ad"   # s[0:4:3]</span><br><span class="line">            --&gt;   "eca"   #s[-3::-2]</span><br><span class="line">            --&gt;   "gd"  #s[:-6:-3]</span><br></pre></td></tr></table></figure><p>能不能对字符串进行索引赋值操作？</p><p>字符串不能进行索引赋值操作，字符串是不可变的数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"abc"</span></span><br><span class="line">s[<span class="number">0</span>] = <span class="string">'1'</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p>因为字符串可以进行索引操作，所以字符串也是可迭代对象</p><p>可迭代对象：一个对象中的元素可以依次拿出来</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>while 循环：</p><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 真值表达式:</span><br><span class="line">语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句块<span class="number">2</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>程序运行时先判断真值表达式是否为真，为真则执行语句块1，然后继续判断真值表达式是否为真，直到真值表达式为假时执行else子句然后结束程序</p><p>如果循环为死循环时else子句永远不被执行</p><p>else子句可以不写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">s = <span class="string">'abc'</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">3</span>:</span><br><span class="line">    print(s[i])</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">break</span><br><span class="line">continue</span><br></pre></td></tr></table></figure><p>练习：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"123b456a"</span></span><br><span class="line">使用循环求s字符串中数字的和</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">s = <span class="string">'123a456b'</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">if</span> s[i] <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">'ab'</span>:</span><br><span class="line">        sum+= int(s[i])</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>作业：</p><p>随机输入一个字符串找出最大的元素，和最小的元素。</p><p>回顾：</p><h4 id="条件表达式-1"><a href="#条件表达式-1" class="headerlink" title="条件表达式"></a>条件表达式</h4><p>格式：</p><p>表达式1  if 真值表达式 else 表达式2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">min = min if s[i] &gt; min else s[i]</span><br></pre></td></tr></table></figure><h4 id="字符串-str"><a href="#字符串-str" class="headerlink" title="字符串(str)"></a>字符串(str)</h4><p>单双引号   三单/双引号</p><p>单双引号如果需要换行要使用\n</p><p>三单/双引号直接使用回车键实现换行</p><p>单引号可以存在于双引号中，不表示字符串的结束，同理双引号与单引号类似</p><p>str()  字符串的构造方法   也称强制转换符</p><h5 id="索引-切片"><a href="#索引-切片" class="headerlink" title="索引/切片"></a>索引/切片</h5><p>练习：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = &apos;abcdefg&apos;</span><br><span class="line">使用正向索引获取元素  e    g</span><br><span class="line">反向   f</span><br><span class="line">使用切片获取如下字符串：</span><br><span class="line">&quot;bdf&quot;  s[1:6:2]   s[1::2]</span><br><span class="line">&quot;ec&quot;   s[-3:-6:-2]  s[4:1:-2]</span><br><span class="line">&apos;edb&apos;  #错误</span><br></pre></td></tr></table></figure><p>说明：</p><p>如果正向索引时步长为负数，则start &gt; stop值</p><p>正向索引时步长为正数，start&lt; stop</p><h4 id="字符串的比较运算符"><a href="#字符串的比较运算符" class="headerlink" title="字符串的比较运算符"></a>字符串的比较运算符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#繁琐的比较操作</span><br><span class="line">s = &quot;135af0&quot;</span><br><span class="line">ord(s[1]) &gt; ord(s[2])</span><br><span class="line">a = ord(s[1])</span><br><span class="line">min = chr(a)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &lt;   &gt;=  &lt;=  == !=</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;c&apos; &gt; &apos;b&apos;</span><br></pre></td></tr></table></figure><h4 id="字符串逻辑运算符"><a href="#字符串逻辑运算符" class="headerlink" title="字符串逻辑运算符"></a>字符串逻辑运算符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+  +=   *   *=</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="day03"><a href="#day03" class="headerlink" title="day03"></a>day03</h1><p>序列(字符串)内建函数：</p><p>len(x)   读取序列元素个数(序列长度)</p><p>max(x)  求序列中最大元素</p><p>min(x)  求序列中最小的元素</p><p>sum(x)  对序列进行求和(元素必须为数字类型)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"123abc"</span></span><br><span class="line">len(s)  <span class="comment"># 6</span></span><br><span class="line">max(s)  <span class="comment"># 'c'</span></span><br><span class="line">min(s)  <span class="comment"># '1'</span></span><br><span class="line"></span><br><span class="line">print(max(s),min(s))</span><br></pre></td></tr></table></figure><h4 id="while循环的嵌套"><a href="#while循环的嵌套" class="headerlink" title="while循环的嵌套"></a>while循环的嵌套</h4><p>格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 真值表达式<span class="number">1</span>:</span><br><span class="line"><span class="keyword">while</span> 真值表达式<span class="number">2</span></span><br><span class="line">语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句块<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句块<span class="number">3</span></span><br></pre></td></tr></table></figure><p>练习：</p><p>1~100整数求和</p><p>使用while循环实现99乘法表输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">101</span>:</span><br><span class="line">    sum += i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">print(sum)</span><br><span class="line"></span><br><span class="line"><span class="comment">#练习2</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt; <span class="number">10</span>:</span><br><span class="line">    i = j</span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">        print(j ,<span class="string">"*"</span>,i,<span class="string">'='</span>,j*i, end=<span class="string">"\t"</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    print()</span><br><span class="line">    j+=<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="字符串的常用方法"><a href="#字符串的常用方法" class="headerlink" title="字符串的常用方法"></a>字符串的常用方法</h4><p>使用s代表字符串</p><table><thead><tr><th>函数</th><th>含义</th></tr></thead><tbody><tr><td>s.isdigit()</td><td><strong>判断字符串是否全为数字</strong></td></tr><tr><td>s.isalpha()</td><td>判断是否全为字母</td></tr><tr><td>s.isspace()</td><td>判断是否全为空白符(空格)</td></tr><tr><td>s.isalnum()</td><td><strong>判断字符串都是字符（字母 数字 汉字）</strong>（使用频率特地）</td></tr><tr><td>s.isupper()</td><td>判断字符是否全为大写字符</td></tr><tr><td>s.islower()</td><td>判断字符是否全为小写字符</td></tr><tr><td>s.upper()</td><td><strong>将英文字母全部转换成大写</strong></td></tr><tr><td>s.lower()</td><td><strong>将英文字母全部转换成小写</strong></td></tr><tr><td>s.capitalize()</td><td>让字符串的首字母大写（字符串的第一个元素）</td></tr><tr><td>s.strip()</td><td><strong>返回去掉字符串左右空白(空格  /n)字符的新的字符串</strong></td></tr><tr><td>s.lstrip()</td><td>返回去掉左侧空白字符的新的字符串</td></tr><tr><td>s.rstrip()</td><td>返回去掉右侧空白字符的新的字符串</td></tr><tr><td>s.rjust(width)</td><td>返回一个在指定width中右对齐的字符串  ljust()左对齐，空白部分使用空格填充</td></tr><tr><td>s.find(x)</td><td>返回字符原字符串中的下标，如不存在返回-1</td></tr><tr><td>s.find(x,start,end)</td><td>获取字符串中使用start和end范围内的字符x的下标如果找不到则返回-1</td></tr><tr><td>s.replace(old, new, count)</td><td>匹配出字符串中old字符内容替换成新的字符内容，count表示替换个数</td></tr><tr><td>s.center(width,fill)</td><td>在给定宽度内让字符串居中，左右填充空白</td></tr><tr><td>s.count(width,fill)</td><td>获取查找字符x在字符串中出现的次数</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h5 id="s-find-x-start-end"><a href="#s-find-x-start-end" class="headerlink" title="s.find(x, start, end)"></a>s.find(x, start, end)</h5><p>start和end相当于切片，在设定范围内查找元素x是否存在存在返回在字符串中对应的小标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"12345666"</span></span><br><span class="line">s.find(<span class="string">'6'</span>)  <span class="comment">#5  #当查找元素有多个时，只返回第一次出现元素的下标</span></span><br><span class="line">s.find(<span class="string">'1'</span>)  <span class="comment">#0</span></span><br><span class="line">s.find(<span class="string">'1'</span>,<span class="number">3</span>) <span class="comment">#-1  找不到  #从下标为3处开始查找</span></span><br><span class="line">s.find(<span class="string">'2'</span>,<span class="number">3</span>,<span class="number">5</span>) <span class="comment">#-1  是在字符串下标3~5区间查找元素"2"不存在返回-1</span></span><br></pre></td></tr></table></figure><h5 id="s-replace-old-new-count"><a href="#s-replace-old-new-count" class="headerlink" title="s.replace(old, new, count)"></a>s.replace(old, new, count)</h5><p>count限制替换的个数(正整数)</p><p>当不添加count参数是默认将匹配到的内容全部替换成新的字符串内容</p><p>如果给定count则替换前conut个内容，如果count值大于字符串中old个数，则全部替换</p><p>当old不存在时则原字符串不改变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"1234566543"</span></span><br><span class="line">s.replace(<span class="string">'6'</span>,<span class="string">'8'</span>) <span class="comment">#"1234588543"</span></span><br><span class="line">s.replace(<span class="string">"5"</span>,<span class="string">'6'</span>,<span class="number">1</span>)  <span class="comment">#"1234666543"</span></span><br><span class="line">s.replace(<span class="string">"5"</span>,<span class="string">'6'</span>,<span class="number">5</span>)  <span class="comment">#"1234666543"</span></span><br><span class="line">s.replace(<span class="string">"a"</span>,<span class="string">'b'</span>)   <span class="comment">#"1234566543"</span></span><br></pre></td></tr></table></figure><h5 id="s-center-width-fill"><a href="#s-center-width-fill" class="headerlink" title="s.center(width,fill)"></a>s.center(width,fill)</h5><p>在给定宽度内让字符串居中，左右默认填充空格，也可以使用fill参数设定空白填充符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"abc"</span></span><br><span class="line">s.center(<span class="number">20</span>)  <span class="comment">#'        abc         '</span></span><br><span class="line">s.center(<span class="number">10</span>,<span class="string">'-'</span>)   <span class="comment">#'---abc----'</span></span><br></pre></td></tr></table></figure><h5 id="s-count-x-start-end"><a href="#s-count-x-start-end" class="headerlink" title="s.count(x,start,end)"></a>s.count(x,start,end)</h5><p> 获取查找字符x在字符串中出现的次数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;aaabbbcdefg&quot;</span><br><span class="line">s.count(&apos;a&apos;)   #3</span><br><span class="line">s.count(&apos;a&apos;,1) #2</span><br><span class="line">s.count(&apos;h&apos;) #0</span><br></pre></td></tr></table></figure><p>练习：</p><p>随便输入一个字符串，对数字字符进行求和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = input(<span class="string">'随机输入内容：'</span>)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(s):</span><br><span class="line">    <span class="keyword">if</span> s[i].isdigit():</span><br><span class="line">        sum += int(s[i])</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>作用：</p><p>是用来遍历序列或可迭代对象中的每一个元素</p><p>可迭代对象：</p><p>指能一次获取数据的对象，包括字符串、列表、元组、字典、集合</p><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 可迭代对象:</span><br><span class="line">语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句块<span class="number">2</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>1 变量绑定的值依次为可迭代对象每次给出的元素，然后执行语句块1</p><p>当可迭代向的元素被遍历结束后for循环结束执行else子句。</p><p>2 else可以省略</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"abcdefg"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">print(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"程序结束~"</span>)</span><br></pre></td></tr></table></figure><p>3 当在循环内使用break语句终止循环式else子句不再执行(同样适用于while循环)</p><h4 id="range-函数"><a href="#range-函数" class="headerlink" title="range()函数"></a>range()函数</h4><p>作用：</p><p>用来生成依次列整数的可迭代对象(整数序列生成器)</p><p>格式：</p><p>range(start, stop, step)</p><p>range(stop)</p><p>range(start, stop)</p><p>start : 起始值，默认为0，可以省略</p><p>stop: 终止值，必须存在，且终止值无法得到</p><p>step：步长，默认为1， 值可正可负  也可以省略</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">range(<span class="number">1</span>,<span class="number">10</span>)  <span class="comment">#123456789</span></span><br><span class="line">range(<span class="number">10</span>) <span class="comment">#0123456789</span></span><br><span class="line">range(<span class="number">-5</span>,<span class="number">6</span>,<span class="number">2</span>) <span class="comment">#-5 -3 -1 1 3</span></span><br></pre></td></tr></table></figure><p>练习：</p><p>使用for循环实现1~100的求和</p><p>9的阶乘</p><h4 id="for循环的嵌套"><a href="#for循环的嵌套" class="headerlink" title="for循环的嵌套"></a>for循环的嵌套</h4><p>格式：</p><p>iterable：可迭代对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> iterable：</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> iterable1：</span><br><span class="line">语句块</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句块<span class="number">2</span></span><br></pre></td></tr></table></figure><p>使用for循环查看50以内的质数(素数)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">51</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>,int(i**<span class="number">0.5</span>)+<span class="number">1</span>):</span><br><span class="line">        <span class="comment">#int(i**0.5)+1</span></span><br><span class="line">        <span class="comment">#int(i/2)</span></span><br><span class="line">        <span class="comment"># i</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(i,end=<span class="string">"\t"</span>)</span><br></pre></td></tr></table></figure><p>循环总结：</p><p>while循环：主要哟用于未知循环次数</p><p>for循环：主要用于已知循环次数</p><p>%s   %d   %f</p><p>%2d     %.2f</p><p>%s   字符串占位符</p><p>%d  整数占位符</p><p>%f   浮点型占位符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;旺财&quot;</span><br><span class="line">v = 15</span><br><span class="line">print(&quot;%s以%d的速度向你跑来!&quot; % (s,v))</span><br></pre></td></tr></table></figure><h4 id="format函数"><a href="#format函数" class="headerlink" title="format函数"></a>format函数</h4><p>格式化输出内容</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&#123;&#125;,&#123;&#125;&quot;.format(value1,value2)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;旺财&quot;</span><br><span class="line">v = 15</span><br><span class="line">print(&quot;&#123;0&#125;以&#123;1&#125;的速度向你跑来!&quot;.format(s,v))</span><br><span class="line">print(&quot;&#123;1&#125;以&#123;0&#125;的速度向你跑来!&quot;.format(s,v))</span><br></pre></td></tr></table></figure><p>在python3.6以上版本中可以使用如下格式实现格式化输出内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;旺财&quot;</span><br><span class="line">v = 15</span><br><span class="line">print(f&quot;&#123;s&#125;以&#123;v&#125;的速度向你跑来!&quot;)</span><br></pre></td></tr></table></figure><h3 id="列表-list"><a href="#列表-list" class="headerlink" title="列表 list"></a>列表 list</h3><p>定义:</p><p>1 是由一系列特定元素组成的，元素和元素之间没有关联关系，</p><p>只有先后顺序</p><p>2 列表也是序列</p><p>3 列表中的元素可以是任意数据类型</p><p>4 <strong>列表是可变的数据类型</strong></p><h4 id="列表的表示方法："><a href="#列表的表示方法：" class="headerlink" title="列表的表示方法："></a>列表的表示方法：</h4><p>使用[]括起来，元素与元素之间用逗号隔开</p><h4 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h4><h5 id="创建空列表"><a href="#创建空列表" class="headerlink" title="创建空列表"></a>创建空列表</h5><p>L = []</p><h5 id="非空列表"><a href="#非空列表" class="headerlink" title="非空列表"></a>非空列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l = [1,&apos;a&apos;]</span><br><span class="line">l = [&apos;a&apos;,[1,3,&apos;bc&apos;]]</span><br></pre></td></tr></table></figure><h4 id="列表的构造方法"><a href="#列表的构造方法" class="headerlink" title="列表的构造方法"></a>列表的构造方法</h4><p>list(iterable)</p><p>L = list()    #空列表</p><p>L1 = list(“abc”)</p><p>L2 = list(123)#错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l2 = list(&quot;1234&quot;)  #[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;]</span><br><span class="line">l3 = list(range(5)) #[0, 1, 2, 3, 4]</span><br></pre></td></tr></table></figure><h4 id="列表的遍历"><a href="#列表的遍历" class="headerlink" title="列表的遍历"></a>列表的遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],<span class="number">7</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list：</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><p>作用：遍历列表中的每一个元素</p><h4 id="列表的运算符"><a href="#列表的运算符" class="headerlink" title="列表的运算符"></a>列表的运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+   +=   </span><br><span class="line">列表的拼接</span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">l2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="string">'a'</span>]</span><br><span class="line">print(l + l2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*  *=</span><br><span class="line">将列表中的元素重复多少遍</span><br></pre></td></tr></table></figure><p>列表可以进行大小比较？</p><p>不会对列表进行大小比较，如要比较时比较列表个位置元素的类型要一一对应</p><h5 id="列表-in-not-in"><a href="#列表-in-not-in" class="headerlink" title="列表 in  /  not  in"></a>列表 in  /  not  in</h5><p>判断一个元素是否在列表中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [1,2,3]</span><br><span class="line">[1,2] in l  #False</span><br><span class="line">1 in l  #True</span><br></pre></td></tr></table></figure><h4 id="列表的索引操作"><a href="#列表的索引操作" class="headerlink" title="列表的索引操作"></a>列表的索引操作</h4><p>格式：</p><p>同字符串</p><p>L[整数表达式]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l [&apos;a&apos;,&apos;b&apos;,1,0,2]</span><br><span class="line">l[3]  #0</span><br><span class="line">l[-2]  #0</span><br></pre></td></tr></table></figure><p>规则与字符串索引相同</p><p>切片：</p><p>等同于字符串切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">使用切片将列表中所有的偶数切出 </span><br><span class="line">[<span class="number">6</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">L = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">print(L[<span class="number">1</span>::<span class="number">2</span>])</span><br><span class="line">print(L[<span class="number">-3</span>:<span class="number">-7</span>:<span class="number">-3</span>])</span><br><span class="line">print(L[<span class="number">5</span>:<span class="number">1</span>:<span class="number">-3</span>])</span><br></pre></td></tr></table></figure><p>练习：</p><p>列表L = [1,2,3,[‘a’,’b’],4,5,6]</p><p>使用索引获取元素‘b’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[3][1]</span><br></pre></td></tr></table></figure><p>因为列表是列表是可变的数据类型，所以可以通过索引/切片赋值操作改变列表元素</p><h4 id="索引赋值"><a href="#索引赋值" class="headerlink" title="索引赋值"></a>索引赋值</h4><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[整数表达式] = 值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [1,2,3,4]</span><br><span class="line">即将元素3改为&apos;a&apos;</span><br><span class="line">l[2] = &apos;a&apos;</span><br></pre></td></tr></table></figure><p>列表(序列)的内建函数：</p><p>len()    max()   min()   sum()元素必须全为数字类型</p><p>常用函数：</p><p>L.append(x)</p><p>将元素x追加到列表L后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'hello'</span></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">l.append(s)</span><br><span class="line">print(l)</span><br></pre></td></tr></table></figure><p>作业：</p><p>使用列表实现斐波那契数,（实现前十位数即可）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,1,2,3,5,8,13,21,...]</span><br></pre></td></tr></table></figure><pre><code>L=[1,1]while len(L)&lt;10:    L.append(L[-1]+L[-2])print(L)</code></pre><p>使用for循环求100~1000以内的水仙花数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1** 3 + 5 ** 3 + 3 ** 3 = 153</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for a in range(0,9,1):</span><br><span class="line">    for b in range(0,9,1):</span><br><span class="line">        for c in range(0,9,1):</span><br><span class="line">            m = a**3 + b**3 + c**3</span><br><span class="line">            n = int(str(a) + str(b) + str(c))</span><br><span class="line">            if m==n:</span><br><span class="line">                print(m)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python基础&quot;&gt;&lt;a href=&quot;#python基础&quot; class=&quot;headerlink&quot; title=&quot;python基础&quot;&gt;&lt;/a&gt;python基础&lt;/h1&gt;&lt;p&gt;概述：&lt;/p&gt;
&lt;p&gt;​    解释型的面向对象语言&lt;/p&gt;
&lt;p&gt;需要使用一个专门的解释器翻译成机器语言，执行一次翻译一次&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>关于我们</title>
    <link href="http://yoursite.com/2020/01/10/%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%AC/"/>
    <id>http://yoursite.com/2020/01/10/关于我们/</id>
    <published>2020-01-09T23:48:48.000Z</published>
    <updated>2020-01-09T15:56:42.126Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1317671992&auto=1&height=66"></iframe>2020.1.9 我们的故事开始了！]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=1317
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>期末不挂科指南</title>
    <link href="http://yoursite.com/2019/12/28/%E6%9C%9F%E6%9C%AB%E4%B8%8D%E6%8C%82%E7%A7%91%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2019/12/28/期末不挂科指南/</id>
    <published>2019-12-27T21:31:34.000Z</published>
    <updated>2020-01-06T15:24:32.262Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们遇到什么困难也不要怕，微笑着面对它！消除恐惧的最好办法就是面对恐惧！坚持，才是胜利。加油！ </p></blockquote><a id="more"></a><h1 id="计算机体系结构"><a href="#计算机体系结构" class="headerlink" title="计算机体系结构"></a>计算机体系结构</h1><h3 id="1-冯诺依曼体系结构："><a href="#1-冯诺依曼体系结构：" class="headerlink" title="1.冯诺依曼体系结构："></a>1.冯诺依曼体系结构：</h3><p>由运算器 存储器 输入输出设备 控制器四个部分组成<br>要点：计算机的数制采用二进制；计算机应该按照程序顺序进行。</p><h3 id="2-量化设计基本原则"><a href="#2-量化设计基本原则" class="headerlink" title="2.量化设计基本原则"></a>2.量化设计基本原则</h3><p>1.大概率事件优先原则<br>2.Amdahl定律<br>3.程序的局部性原理<br>4.CPU的性能</p><h3 id="3-MIPS指令寻址方式和指令含义"><a href="#3-MIPS指令寻址方式和指令含义" class="headerlink" title="3.MIPS指令寻址方式和指令含义"></a>3.MIPS指令寻址方式和指令含义</h3><p>MIPS的数据寻址方式只有立即数寻址和偏移量寻址两种，<br>I类指令、R类指令、J类指令。在MIPS中，控制流的改变是由一组跳转或一组分支指令来实现的。</p><h3 id="4-流水线中的相关及产生原因"><a href="#4-流水线中的相关及产生原因" class="headerlink" title="4.流水线中的相关及产生原因"></a>4.流水线中的相关及产生原因</h3><p>1.结构相关：当指令在同步重叠执行过程中，硬件资源满足不了指令重叠执行的要求，发生资源冲突时将产生“结构相关”。<br>2.数据相关：当一条指令需要用到前面指令的执行结果，而这些指令均在流水线中重叠执行时，就可能引起“数据相关”。<br>3.控制相关：当流水线遇到分支指令和其他能够改变PC值的指令时就会发生“控制相关”。</p><h3 id="5-分支目标缓冲"><a href="#5-分支目标缓冲" class="headerlink" title="5.分支目标缓冲"></a>5.分支目标缓冲</h3><p>要减少分支延迟，就要在指令阶段后期，知道在什么地址取下一条指令和可能的分支目标指令的地址。如果下一条指令是分支指令而且已知它的目标地址，则分支的开销可以降为零。<br>将分支成功的分支指令的地址和它的分支目标地址都放到一个缓冲区中保存起来，缓存区以分支指令的地址作为标识；取指令阶段，所有指令地址都与保存的标识作比较，一旦相同，就认为本指令是分支指令，且认为它转移成功，并且它的分支目标地址就是保存在缓冲区中的分支目标地址。</p><h3 id="6-Cache的平均访存时间计算及Cache性能提升的方法"><a href="#6-Cache的平均访存时间计算及Cache性能提升的方法" class="headerlink" title="6.Cache的平均访存时间计算及Cache性能提升的方法"></a>6.Cache的平均访存时间计算及Cache性能提升的方法</h3><p>平均访存时间=命中时间+失效率×失效开销<br>性能提升方法：减少失效开销，减少命中时间，降低失效率。</p><h3 id="7-RAID0-RAID"><a href="#7-RAID0-RAID" class="headerlink" title="7.RAID0~RAID"></a>7.RAID0~RAID</h3><p>RAID使用多个小容量磁盘代替一个大容量磁盘，能够有效改善磁盘的I/O性能，同时使磁盘容量扩充变简单。<br>RAID0：采用数据分块技术，把数据分布在多个磁盘上，无冗余信息。</p><h3 id="8-“网络”定义及对其传统计算机体系结构的冲击"><a href="#8-“网络”定义及对其传统计算机体系结构的冲击" class="headerlink" title="8.“网络”定义及对其传统计算机体系结构的冲击"></a>8.“网络”定义及对其传统计算机体系结构的冲击</h3><p>网络是由节点和连线构成，表示诸多对象及其相互联系。是信息传输、接收、共享的虚拟平台，实现信息共享。影响：将所有的部分都联系到一起。</p><h3 id="基于冯诺依曼体系结构，论述基于CPU、存储器、I-O接口进行的计算机系统性能提升的技术研究，谈自己的看法。"><a href="#基于冯诺依曼体系结构，论述基于CPU、存储器、I-O接口进行的计算机系统性能提升的技术研究，谈自己的看法。" class="headerlink" title="基于冯诺依曼体系结构，论述基于CPU、存储器、I/O接口进行的计算机系统性能提升的技术研究，谈自己的看法。"></a>基于冯诺依曼体系结构，论述基于CPU、存储器、I/O接口进行的计算机系统性能提升的技术研究，谈自己的看法。</h3><p>电脑的信息经过计算、处理、输出结果，而不是将数据同时输入电脑，这种串行方式延长了延长了数据输入和处理时间，限制了电脑的计算处理速度。<br>CPU与外部设备、存储器的连接和数据交换都需要通过接口设备来实现，前者被称为I/O接口，后者被称为存储器接口。存储器通常在CPU的同步控制下工作。<br>提升运算速度，需要执行的程序与需要处理的数据存放在主存中，内存的性能指标包括存储容量与存取速度。</p><h1 id="微机原理"><a href="#微机原理" class="headerlink" title="微机原理"></a>微机原理</h1><h3 id="1“权”与进制转换。"><a href="#1“权”与进制转换。" class="headerlink" title="1“权”与进制转换。"></a>1“权”与进制转换。</h3><p>进制转换是人们利用符号来计数的方法。进制转换由一组数码符号和两个基本“基数”与“位权”构成。<br>基数是指进位计数制中的所采用的数码个数。<br>位权是指进位制中每一固定位置对应单位值。</p><h3 id="2数据存储与码制"><a href="#2数据存储与码制" class="headerlink" title="2数据存储与码制"></a>2数据存储与码制</h3><p>为了运算方便，带码符的机器数可采用原码、反码、补码、移码等不同的编码方式表示。这些编码方法被称为码制。<br>各种数据在计算机内部的表示和存储形式称为机器数。<br>特点：采用二进制，数的正负用0、1表示，小数点隐含表示二不占位置</p><h3 id="3寻址方式"><a href="#3寻址方式" class="headerlink" title="3寻址方式"></a>3寻址方式</h3><p>寻址方式就是处理器根据指令中给出的地址信息来寻找有效地址的方式，是确定本条指令的数据地址以及下一条要执行的指令地址方式</p><h3 id="4、8086扩展电路"><a href="#4、8086扩展电路" class="headerlink" title="4、8086扩展电路"></a>4、8086扩展电路</h3><p>8086是16位微处理器。它的内部寄存器的主体是16位的，主要用于存放操作数的数据寄存器是16位的，主要作用地址指针的指针寄存器也是16位的。依赖分段机制，用20位段基地址加上16位的偏移量形成了20位的地址，以寻址IBM的物理地址。</p><h3 id="5、I-O接口的数据传输"><a href="#5、I-O接口的数据传输" class="headerlink" title="5、I/O接口的数据传输"></a>5、I/O接口的数据传输</h3><p>CPU和外设之间通常传递的信息：数据、状态、控制。<br>组成：寄存器组、控制逻辑电路、主机与接口和接口与I/O设备之间的信号连接线、数据地址线、控制状态信号线。<br>数据传输方式：1.程序查询方式 2.程序中断方式 3.直接存储器（DMA）方式</p><h3 id="6、中断系统"><a href="#6、中断系统" class="headerlink" title="6、中断系统"></a>6、中断系统</h3><p>中断装置和中断处理程序统称为中断系统。中断系统是计算机的重要组成部分。实时控制、故障自动处理、计算机与外围设备间的数据传送往往采用中断系统。中断系统的应用大大提高了计算机效率</p><h3 id="2个64位二进制的加减运算"><a href="#2个64位二进制的加减运算" class="headerlink" title="2个64位二进制的加减运算"></a>2个64位二进制的加减运算</h3><pre><code>    AREA example,CODE,READONLY    ENTARYstart    mov r0,#1    mov r1,#0xffffffff    mov r2,#1    mov r3,#0x2    adds r1,r2,r3  ;c位置1进位 r1 00000001 进一位    add r0,r0,r2   ;高位相加 得2 进1一位 得加上 所以r是0x00000003</code></pre><h1 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h1><hr><h3 id="软件危机的表现"><a href="#软件危机的表现" class="headerlink" title="软件危机的表现"></a>软件危机的表现</h3><p>1.对软件开发成本和进度的估计常常很不正确 2.用户对已完成软件系统不满意 3.软件产品质量靠不住 4.软件常常不可维护 5.软件通常没有适当文档 6.软件成本提高 7.软件生产速度跟不上计算机普及深入趋势。</p><h3 id="软件工程的定义"><a href="#软件工程的定义" class="headerlink" title="软件工程的定义"></a>软件工程的定义</h3><p>软件工程是指导计算机软件开发和维护的一门工程学科</p><h3 id="软件工程的基本原理"><a href="#软件工程的基本原理" class="headerlink" title="软件工程的基本原理"></a>软件工程的基本原理</h3><p>1.用分阶段的生命周期计划严格管理 2.坚持进行阶段评审 3.实行严格的产品控制 4.采用现代程序设计技术 5.结果应能清楚地审查 6.开发小组的人员应该少而精 7.承认不断改进软件工程实践的必要</p><h3 id="软件生命周期的定义以及阶段划分"><a href="#软件生命周期的定义以及阶段划分" class="headerlink" title="软件生命周期的定义以及阶段划分"></a>软件生命周期的定义以及阶段划分</h3><p>定义：软件的产生直到报废的生命周期<br>阶段划分：1.问题定义 2.可行性研究 3.需求分析 4.总体设计 5.详细设计 6.编码和单元测试 7.综合测试</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>定义：通过分析，确定系统功能的过程<br>任务：导出系统的逻辑模型   修正系统开发计划<br>步骤：1.功能需求 2.性能需求 3.可靠性和可用性需求 4.出错处理需求 5.接口需求 6。约束 7. 逆向需求 8。将来可能提出的要求</p><h3 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h3><p>任务：概况地说，系统应该如何实现<br>步骤：1.设想供选择的方案 2.选取合理的方案 3.推荐最佳方案 4.功能分解 5.设计软件结构 6.设计数据库 7.制定测试计划 8.书写文档<br>设计原理：耦合：对一个软件结构内不同模块之间互连程度的度量。内聚：模块内彼此结合的紧密程度衡量模块独立性的标准<br>功能内聚 顺序内聚 通信内聚 过程内聚 时间/逻辑/偶然内聚</p><h3 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h3><p>任务：设计出程序蓝图，以后程序员将根据这个蓝图写出实际的程序代码<br>步骤：先创建设计模型，再用原型实现这个设计模型，并由用户试用和评估，然后根据用户意见修改</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>黑盒测试（知道功能） 白盒测试（知道产品内部工作过程）<br>步骤：模块测试 子系统测试 系统测试 验收测试 平行运行</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我们遇到什么困难也不要怕，微笑着面对它！消除恐惧的最好办法就是面对恐惧！坚持，才是胜利。加油！ &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>samba共享服务器</title>
    <link href="http://yoursite.com/2019/12/26/samba%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2019/12/26/samba共享服务器/</id>
    <published>2019-12-25T16:36:52.000Z</published>
    <updated>2019-12-29T16:54:06.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Samba服务概述"><a href="#Samba服务概述" class="headerlink" title="Samba服务概述"></a>Samba服务概述</h2><p>1.1 Samba概述<br>Samba最先在Linux和Windows两个平台之间架起一座桥梁，可以因此在两个系统之间相互通信，比如拷贝文件、实现不同操作系统之间的资源共享等。可以将其架设为一个文件服务器或打印服务器提供本地和远程联机打印。</p><a id="more"></a><p>1.2 应用环境<br>文件和打印机共享<br>身份验证和权限设置<br>名称解析<br>浏览服务</p><p>端口号：139和445<br>NETBIOS协议：<br>网络基本输入/输出系统协议。协议，一般指用于局域网通信的一套API。<br>主要作用：通过NETBIOS协议获得计算机名称，然后把计算机名解析为对应IP地址。</p><p>模式：C/S模式</p><h3 id="检查安装Samba"><a href="#检查安装Samba" class="headerlink" title="检查安装Samba"></a>检查安装Samba</h3><p>rpm -qa|grep samba<br>如果出现以下显示，说明已经安装。<br>samba-common-2.2.7a-7.9.0（CD1里）<br>samba-client-2.2.7a-7.9.0<br>samba-2.2.7a-7.9.0　<br>redhat-config-samba-1.0.4-1(图形配置界面)<br>samba-swat-2.2.7a-7.9.0（网页配置界面）<br>如果没有安装，那么按照以下步骤：<br>把第一张光盘放进光驱,他会自动挂接的,省得自己动手mount了<br>　　#cd /mnt/cdrom/RedHat/RPMS(注意大小写字母,否则会出错)<br>　　#rpm -ivh samba-common-2.2.7a-7.9.0 (这个要先安装,安装的时候不一定要把后面的<br>　　samba-common-2.2.7a-7.9.0全部写完,比如写到samba-c的时候,多按几次Tab键,很省事的哦)<br>　　#rpm -ivh  samba-2.2.7a-7.9.0<br>#rpm -ivh  samba-client-2.2.7a-7.9.0(客户端)<br>#rpm -ivh  redhat-config-samba-1.0.4-1<br>#rpm -ivh  samba-swat-2.2.7a-7.9.0。在第三张光盘里<br><strong>注意要插入光盘，在VMware界面/虚拟机/可移动设备/CD/DVD/设置选择光盘</strong></p><p>1.Samba的两个服务一个是smb，另一个是nmb；<br> [root@localhost ~]# /etc/init.d/smb start<br>启动 SMB 服务：                                            [  确定  ]<br>启动 NMB 服务：                                            [  确定  ]<br>如果停止呢？就在smb后面加stop ；重启就是restart<br>[root@localhost ~]# /etc/init.d/smb stop<br>[root@localhost ~]# /etc/init.d/smb restart</p><p>查看服务器是否运行起来了，则用下面的命令；<br>[root@localhost ~]# pgrep smbd<br>[root@localhost ~]# pgrep nmbd<br>关掉Samba服务器，也可以用下面的办法，大多是通用的；要root权限来执行；<br>[root@localhost ~]# pkill smbd<br>[root@localhost ~]# pkill nmbd<br><strong>注意要关闭物理机的防火墙</strong></p><h3 id="实现匿名用户可读可写"><a href="#实现匿名用户可读可写" class="headerlink" title="实现匿名用户可读可写"></a>实现匿名用户可读可写</h3><p>第一步： 更改smb.conf<br>我们来实现一个最简单的功能，让所有用户可以读写一个Samba 服务器共享的一个文件夹；我们要改动一下smb.conf ；首先您要备份一下smb.conf文件；<br>[root@localhost ~]# cd /etc/samba<br>[root@localhost samba]# mv smb.conf smb.confBAK<br>然后我们来重新创建一个smb.conf文件；<br>[root@localhost samba]#touch smb.conf<br>然后我们把下面这段写入smb.conf中；<br>[global]<br>workgroup = LinuxSir<br>netbios name = LinuxSir05<br>server string = Linux Samba Server TestServer<br>security = share</p><p>[linuxsir]<br>        path = /opt/linuxsir<br>        writeable = yes<br>        browseable = yes<br>        guest ok = yes</p><p>注解：<br>[global]这段是全局配置，是必段写的。其中有如下的几行；<br>workgroup 就是Windows中显示的工作组；在这里我设置的是LINUXSIR （用大写）；<br>netbios name 就是在Windows中显示出来的计算机名；<br>server string 就是Samba服务器说明，可以自己来定义；这个不是什么重要的；<br>security 这是验证和登录方式，这里我们用了share ；验证方式有好多种，这是其中一种；另外一种常用的是user的验证方式；如果用share呢，就是不用设置用户和密码了；<br>[linuxsir] 这个在Windows中显示出来是共享的目录；<br>path = 可以设置要共享的目录放在哪里；<br>writeable 是否可写，这里我设置为可写；<br>browseable 是否可以浏览，可以；可以浏览意味着，我们在工作组下能看到共享文件夹。如果您不想显示出来，那就设置为 browseable=no<br>guest ok 匿名用户以guest身份是登录；</p><h3 id="身份验证共享"><a href="#身份验证共享" class="headerlink" title="身份验证共享"></a>身份验证共享</h3><p>1.修改samba主配置文件smb.conf<br>    vim /etc/samba/smb.conf<br>然后<br>    passdb backend=smbpasswd<br>    smb passwd file =/etc/samba/smbpasswd</p><p>重启服务：<br>    service smb restart</p><p>查看目录自动穿件了smbpasswd文件<br>    ls /etc/samba/</p><p>添加用户和组并添加相应的samba账号<br>使用groupadd命令添加xsb组，然后执行useradd命令和passwd命令添加销售部员工账号密码<br>    groupadd xsb<br>    useradd -g xsb xsb01<br>    useradd -g xsb xsb02</p><pre><code>id xsb01</code></pre><p>创建共享目录，<br>    mkdir /xsb<br>    cp /etc/hosts /xsb/<br>修改配置文件，制定目录共享，设置权限<br>    vim /etc/samba/smb.conf<br>[xsb]<br>//设置共享目录的共享名<br>comment = xsb data<br>path =/xsb<br>//设置共享目录的绝对路径<br>valid users =@xsb<br>//设置允许访问的用户为xsb组内的用户<br>    service smb restart</p><p>然后可以访问虚拟机ip地址 192.168.42.2<br>我的主机地址是 192.168.42.1<br>主机win+R 然后输入ipconfig查询主机IP地址<br>虚拟机打开终端输入 ifconfig -a 查询虚拟机IP</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Samba服务概述&quot;&gt;&lt;a href=&quot;#Samba服务概述&quot; class=&quot;headerlink&quot; title=&quot;Samba服务概述&quot;&gt;&lt;/a&gt;Samba服务概述&lt;/h2&gt;&lt;p&gt;1.1 Samba概述&lt;br&gt;Samba最先在Linux和Windows两个平台之间架起一座桥梁，可以因此在两个系统之间相互通信，比如拷贝文件、实现不同操作系统之间的资源共享等。可以将其架设为一个文件服务器或打印服务器提供本地和远程联机打印。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>关于2019</title>
    <link href="http://yoursite.com/2019/12/21/%E5%85%B3%E4%BA%8E2019/"/>
    <id>http://yoursite.com/2019/12/21/关于2019/</id>
    <published>2019-12-20T16:07:35.000Z</published>
    <updated>2019-12-21T10:34:57.673Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1367485724&auto=0&height=66"></iframe><blockquote><p><em>此时已莺飞草长，爱的人正在路上。</em></p></blockquote><p>时间过得真快，年初的那一场大雪还历历在目，现在都到年底了。今年又是<del>充实而有趣</del>碌碌而无为的一年，继续加油吧。<br><strong>- 生活</strong><br><strong>- 学习</strong><br><strong>- 随笔</strong><br><strong>- 心理</strong><br><strong>- 畅想</strong></p><a id="more"></a><h2 id="生活篇"><a href="#生活篇" class="headerlink" title="生活篇"></a>生活篇</h2><pre><code>----------------------------------------------------------</code></pre><p>大三上学期到办了健身卡，去的次数也不是特别多，但对我的帮助挺大的。并不是说因此身材变得多好，而是通过健身使得自己在饮食、休息方面注意了很多。比如以前经常昼夜颠倒不吃早餐喜欢吃宵夜，现在改善了不少。主要是观念发生了变化吧，以前一直信奉“今朝有酒今朝醉”的及时享乐主义，然后导致体魄不是很好。我想自律些也挺好的，就像减脂这件事也并不一定是为了瘦下来多好看，更重要的是身体更健康吧，要是年纪轻轻身体素质不好甚至高血压多难受啊（顺便一提上动感单车课真的很棒）。而且健身就不至于总待在宿舍，多出去走走呼吸下新鲜空气也是好的。希望自己十年二十年后也有好的身体吧。</p><p>今年才算是认认真真地学习做菜，主要是为了以后不至于只能点外卖或者吃泡面吧，而且外边很多餐厅和我的个人习惯不是很符合。最近学的都是素菜，暑假在家的时候也有看一些视频研究怎么做好吃，哈哈买家秀和卖家秀的区别还是挺大的。偶尔听到有人夸我厨艺的时候还是蛮开心的。</p><p><img src="http://i2.tiimg.com/706016/cb49eba3ced7dc51.jpg" alt=""></p><h2 id="学习篇"><a href="#学习篇" class="headerlink" title="学习篇"></a>学习篇</h2><hr><p>对于未来发展与职业规划大致有了方向。虽然现在还是很菜，但相比于迷茫的大一大二，当前状态明显好了很多。大学多好啊，希望自己能够珍惜当下。<br>大三没有参加什么社团或学院活动了，打算多花时间在专业知识学习上。哈哈其实以前参加这些也只是为了加点儿综测分，但参与一些有意义的活动还是还是不错的。<br>                                                <img src="http://i1.fuimg.com/706016/91e4bd299c00cdb3.jpg" alt=""></p><h2 id="随笔篇"><a href="#随笔篇" class="headerlink" title="随笔篇"></a>随笔篇</h2><pre><code>----------------------------------------------------------</code></pre><p>今年去了挺多地方的，有计划过一个人的旅行，结果都是一群人的狂欢。我很喜欢了解一个城市的风土人情和历史沿革。历史真的很神奇，在知道一些历史往事后再去看这座城市往往体会的更多。在看兵马俑时想到秦始皇用陕西话发号施令就觉得很有趣哈哈，七月份的时候去了趟广州和深圳，初见挺喜欢的，如果以后在这两座城市打拼或许也不错。</p><p>可能是性子温和，一直嘻嘻哈哈表现的很开朗，认识了挺多朋友，很庆幸这一点，最高兴的是至今和认识很多年的好友保持联系。<br>其实更多时候我会喜欢独处些。很喜欢周国平先生说的“我天性不宜交际。在多数场合，我不是觉得对方乏味，就是害怕对方觉得我乏味。可是我既不愿忍受对方的乏味，也不愿费劲使自己显得有趣，那都太累了。我独处时最轻松，因为我不觉得自己乏味，即使乏味，也自己承受，不累及他人，无需感到不安。”在这样的话中我找到了共鸣。当然，和朋友相处也是很不错的鸭！</p><p>今年看了好多电影，我印象最深的是动漫电影吧，从19年初的《白蛇缘起》到《哪吒》国漫之光照耀哇！还有《冰雪奇缘》也非常棒，哈哈好像是挺喜欢动漫电影，因为更喜欢喜剧结尾。当然《少年的你》也很精彩啊，不过看完挺压抑的。我觉得看电影是要从千千万万个故事里面读懂千千万万个情感，看电影用倍速看特别不好，感到枯燥体会不到电影的情感大可不必看（所以筛选环境很重要！）。</p><p><img src="http://i2.tiimg.com/706016/5fb56a28d92b09e7.png" alt=""></p><h2 id="心理篇"><a href="#心理篇" class="headerlink" title="心理篇"></a>心理篇</h2><pre><code>----------------------------------------------------------</code></pre><blockquote><p>你要做一个不动声色的大人了</p><p>不准情绪化</p><p>不准偷偷想念</p><p>不准回头看</p><p>去过自己另外的生活</p><p>你要听话</p><p>不是所有的鱼都生活在同一片海里</p></blockquote><p>对感情是抱有期待的，有时候会觉得孤独吧，也希望有人可以沟通，有人可以分享。其实我对于感情是保持悲观态度的。我是个自私的人，在理性上不愿把自己的感情投入到别人身上。可能是自己独立久了会不习惯？自己不愿付出太多？或者是不懂两个人的快乐吧。我也不着急改变什么。看得原来越开，过去做错了什么，错过了什么都不再耿耿于怀，错过也不可惜，尝试着与自己和解，吃亏也趁早吧，人要往前看嘛。<br>不过如果谈了恋爱就对女孩儿好一点。毕竟20岁是男生的人生低谷，除了身体素质，其他无论见识气度还是情商财力都很弱。<br>我好像吃过很多人的瓜，见过很多人的爱恨纠葛，都是别人的故事。其实每个人都有故事啦，不过我的很少。如果遇见一个人，可以把“我走过的四下无人的街，和我度过的烂醉如泥的夜”分享给彼此或许非常不错。</p><p>想要增加一些人生体验吧，去旅行，做义工，哪怕不能经历看看电影也是好的。以前总是迁就别人，担心自己哪里做错了，越来越觉得没必要这样。爱自己才是终生浪漫的开始嘛。有朋友说自己越来越没有耐心，别人真心分享的很多东西也不能用心看完。可是人的经历各不相同，人的悲欢也并不相通。自己的感受才是最重要的。</p><p>我觉得今年是要比去年成长了些的。有了许多自己的想法，三观应该也正了很多。学会辨别别人的说法，学会理解别人的思想，人和人是不同的，认识到不同后又要怎么处理这些不同都需要思考。有时候会审视他人，自己的同理心就消失了。而审视自己的时候，往往只会得到一个结论：SB。这都不好，以后要从更多个角度看待问题吧。</p><p><strong>最重要的一点：可以的话多陪陪多关心家人！</strong></p><p><img src="http://i2.tiimg.com/706016/3cc588a6ecf36d50.png" alt=""></p><h2 id="2020畅想篇"><a href="#2020畅想篇" class="headerlink" title="2020畅想篇"></a>2020畅想篇</h2><pre><code>----------------------------------------------------------</code></pre><p>希望2020的我觉得19年的自己是傻逼(最好少做傻事)，其实如果每年的自己都觉得去年的自己是傻逼也好吧，至少说明自己有进步了。</p><p>最重要的当然是学习啊，因为不准备考研了然后20年应该会开始实习，希望能在实习工作中顺利。</p><blockquote><p><strong>明年有明年的雪</strong></p><p><strong>明年的雾色</strong></p><p><strong>明年的永无止休的阳光</strong></p><p><strong>还有明年数不尽的生机</strong></p></blockquote><p><img src="http://i1.fuimg.com/706016/cd93fd9207585a05.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=1367485724&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;此时已莺飞草长，爱的人正在路上。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;时间过得真快，年初的那一场大雪还历历在目，现在都到年底了。今年又是&lt;del&gt;充实而有趣&lt;/del&gt;碌碌而无为的一年，继续加油吧。&lt;br&gt;&lt;strong&gt;- 生活&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;- 学习&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;- 随笔&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;- 心理&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;- 畅想&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Makedown语法总结</title>
    <link href="http://yoursite.com/2019/12/16/Makedown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/12/16/Makedown语法总结/</id>
    <published>2019-12-16T13:29:19.000Z</published>
    <updated>2019-12-20T15:01:25.646Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=435307280&auto=0&height=66"></iframe><h2 id="这里主要讲十二种Makedown语法的使用-内赠我的壁纸一张"><a href="#这里主要讲十二种Makedown语法的使用-内赠我的壁纸一张" class="headerlink" title="这里主要讲十二种Makedown语法的使用(内赠我的壁纸一张~)"></a>这里主要讲十二种Makedown语法的使用(内赠我的壁纸一张~)</h2><ul><li>标题</li><li>文字修饰符</li><li>分隔符</li><li>列表</li><li>插入引用</li><li>引用</li><li>行内代码</li><li>表格</li><li>流程图</li><li>删除线</li><li>待办事宜 Todo 列表</li><li>内容目录<a id="more"></a><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2>行首插入 1 到 6 个 # ，#和标题文字之间使用一个或多个空格，对应到标题 1 到 6 级，例如：<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></li></ul><h2 id="2-文字修饰符"><a href="#2-文字修饰符" class="headerlink" title="2.文字修饰符"></a>2.文字修饰符</h2><p>粗体修饰举例:</p><pre><code>**陌上花开，可缓缓归矣 **</code></pre><p>例子：<br><strong>陌上花开，可缓缓归矣</strong><br>斜体：</p><pre><code>*陌上花开，可缓缓归矣*</code></pre><p>例子：<br><em>陌上花开，可缓缓归矣</em></p><h2 id="3-分隔符"><a href="#3-分隔符" class="headerlink" title="3.分隔符"></a>3.分隔符</h2><pre><code>Hello world!----------------------------------------------------------Very good!</code></pre><p>最终显示：<br>Hello world!</p><hr><p>Very good!</p><h2 id="4-列表"><a href="#4-列表" class="headerlink" title="4.列表"></a>4.列表</h2><p>列表分为两种：无序列表和有序列表<br>无序列表：<br>    (切记序号与文本之间存在一个空格)</p><pre><code>- Five Hundred Miles- Right Here Waiting- Long Long Journey</code></pre><p>最终显示<br>(切记序号与文本之间存在一个空格)</p><ul><li><p>Five Hundred Miles</p></li><li><p>Right Here Waiting</p></li><li><p>Long Long Journey<br>有序列表<br>(切记序号与文本之间存在一个空格)</p><ol><li><p>Five Hundred Miles</p></li><li><p>1 Right Here Waiting</p></li><li><p>2 Long Long Journey</p></li><li><p>2 Only Time<br>最终显示<br>(切记序号与文本之间存在一个空格)</p></li></ol></li></ul><ol><li>Five Hundred Miles</li></ol><p>1.1 Right Here Waiting</p><p>1.2 Long Long Journey</p><p>2.2 Only Time</p><h2 id="5-插入引用"><a href="#5-插入引用" class="headerlink" title="5.插入引用"></a>5.插入引用</h2><p>插入链接举例：</p><pre><code>[显示文本](链接地址)</code></pre><p><a href="http://zhuangjiel.top/" target="_blank" rel="noopener">小庄的博客主页</a><br>插入图片也一样：</p><pre><code>![显示文本](图片链接地址)</code></pre><p><img src="http://i1.fuimg.com/706016/5b7b522b7b708bc9.jpg" alt=""><br>真好看，不愧是我的壁纸~</p><p><em>对了推荐一个图床，可以把图片上传到<a href="http://www.tietuku.com/" target="_blank" rel="noopener">这个网站</a>，然后获得外部链接，使用Markdown语法就可以完成图片的插入了。完美解决图片占据大量的存储的空间，加载相对缓慢的问题.很方便是不是= =</em></p><h2 id="6-引用"><a href="#6-引用" class="headerlink" title="6.引用"></a>6.引用</h2><p><bir>&gt; I will be right here waiting for you.</bir><br>最终显示</p><blockquote><p>I will be right here waiting for you.</p></blockquote><h2 id="7-行内代码"><a href="#7-行内代码" class="headerlink" title="7.行内代码"></a>7.行内代码</h2><p>代码引用</p><pre><code>&apos;Hello World&apos;</code></pre><p>显示：<code>Hello World</code></p><p>多段代码引用<br>    显示：<br>```<br>Hello World!<br>Hello World!!<br>Hello World!!!<br>```</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">``</span><span class="string">`)</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">(`</span><span class="string">``</span>)</span><br></pre></td></tr></table></figure><h2 id="8-表格"><a href="#8-表格" class="headerlink" title="8.表格"></a>8.表格</h2><p>表格形成（使用|划分列，|—-|表示默认对齐，|—:|表示右对齐，|:–:|表示居中对齐，|:—-|）</p><table><thead><tr><th>姓名</th><th align="right">性别</th><th align="left">手机号</th><th align="center">微信号</th></tr></thead><tbody><tr><td>默认</td><td align="right">右对齐</td><td align="left">左对齐</td><td align="center">居中</td></tr><tr><td>庄杰</td><td align="right">男</td><td align="left">150XXXX</td><td align="center">973XXX</td></tr></tbody></table><h2 id="9-流程图"><a href="#9-流程图" class="headerlink" title="9.流程图"></a>9.流程图</h2><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure></code></pre><p>效果<code>flowst=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp;</code></p><h4 id="10-删除线"><a href="#10-删除线" class="headerlink" title="10.删除线"></a>10.删除线</h4><p><bir><del>这是删除线</del></bir><br><del>这是删除线</del></p><h2 id="11-待办事宜-Todo-列表"><a href="#11-待办事宜-Todo-列表" class="headerlink" title="11.待办事宜 Todo 列表"></a>11.待办事宜 Todo 列表</h2><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表</p><ul><li>[] 吃饭</li><li>[] 睡觉</li><li>[] 打游戏</li><li><input checked="" disabled="" type="checkbox"> 学习</li></ul><h2 id="12-内容目录"><a href="#12-内容目录" class="headerlink" title="12. 内容目录"></a>12. 内容目录</h2><p>在段落中填写 [TOC] 以显示全文内容的目录结构。</p><p><strong>暂时就这么多啦，Makedown还是很好用的。简洁明了又容易掌握，功能也比纯文本强。相对于html而言算是轻量级语言了，而且完美兼容html，可以在文章中直接插入html代码 非常棒！网上也有很多编辑器可以用，比如vscode、MarkPad，我没用过就不评论了，我用的编辑器是Typora，个人感觉很不错。</strong></p><h4 id="一点点建议"><a href="#一点点建议" class="headerlink" title="一点点建议"></a>一点点建议</h4><ul><li>指令无须强记，用多了自然就熟练</li><li>如果有不懂的就查看Markdown语法手册 <a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">网址是这个</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=435307280&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;


&lt;h2 id=&quot;这里主要讲十二种Makedown语法的使用-内赠我的壁纸一张&quot;&gt;&lt;a href=&quot;#这里主要讲十二种Makedown语法的使用-内赠我的壁纸一张&quot; class=&quot;headerlink&quot; title=&quot;这里主要讲十二种Makedown语法的使用(内赠我的壁纸一张~)&quot;&gt;&lt;/a&gt;这里主要讲十二种Makedown语法的使用(内赠我的壁纸一张~)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;标题&lt;/li&gt;
&lt;li&gt;文字修饰符&lt;/li&gt;
&lt;li&gt;分隔符&lt;/li&gt;
&lt;li&gt;列表&lt;/li&gt;
&lt;li&gt;插入引用&lt;/li&gt;
&lt;li&gt;引用&lt;/li&gt;
&lt;li&gt;行内代码&lt;/li&gt;
&lt;li&gt;表格&lt;/li&gt;
&lt;li&gt;流程图&lt;/li&gt;
&lt;li&gt;删除线&lt;/li&gt;
&lt;li&gt;待办事宜 Todo 列表&lt;/li&gt;
&lt;li&gt;内容目录
    
    </summary>
    
    
    
      <category term="学习 Markdown" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0-Markdown/"/>
    
  </entry>
  
  <entry>
    <title>javaSE进阶</title>
    <link href="http://yoursite.com/2019/12/10/javaSE%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2019/12/10/javaSE进阶/</id>
    <published>2019-12-10T15:51:18.576Z</published>
    <updated>2020-02-05T14:40:24.848Z</updated>
    
    <content type="html"><![CDATA[<p>title: javaSE进阶<br>date: 2019-12-10 23:51:18<br>tags: java<br>categories: java</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=409654891&auto=0&height=66"></iframe>#### 接口作用   1.可以使项目分层，所有层都面向接口开发，提高效率   2.降低代码间的耦合度。   3.接口可多实现、多继承    public interface customerService{        //定义一个退出系统的方法        void logout();    }<a id="more"></a>#### 静态内部类(static)    可以等同看做静态变量    内部类重要的作用：可以访问外部类中似有的数据#### 成员内部类    可以等同看做成员变量    不能有静态声明(static)#### 局部内部类    等同于局部变量    **局部内部类在访问局部变量时，局部变量必须使用final修饰**    int i = 10;#### 匿名内部类#### 类和类之间的关系    - 泛化关系：类和类之间的继承关系及接口与接口之间的继承关系    - 实现关系：类对接口的实现。    - 关联关系：类与类之间的连接    - 聚合关系：是关联关系的一种，整体和部分的关系，比如汽车和轮胎。    - 合成关系：合成关系和聚合关系类似，区别在于 整体整体和部分是紧密相连的，整体的生命周期决定部分生命周期，比如人和大脑。    - 依赖关系<h2 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h2><pre><code>1.异常是什么 </code></pre><p>异常模拟的是现实世界中“不正常”事件<br>java中采用“类”模拟异常<br>类是可以创建对象的。<br>    2.异常机制的作用<br>java为我们提供一种完善的异常处理机制<br>作用：程序发生异常事件后，为我们输出详细的信息，程序员通过这个信息，可以对程序进行一些处理，使程序更加健壮。</p><h4 id="如何处理异常"><a href="#如何处理异常" class="headerlink" title="如何处理异常"></a>如何处理异常</h4><pre><code>- 声明抛出 throws</code></pre><p>throws并不是处理异常，只是向上抛（类似推卸责任），谁让执行就抛给谁，如果一直抛到最高层就会抛给JVM虚拟机，然后不执行。<br>    - 捕捉  try…catch<br>真正处理。</p><h4 id="getMessage和printStackTrace方法"><a href="#getMessage和printStackTrace方法" class="headerlink" title="getMessage和printStackTrace方法"></a>getMessage和printStackTrace方法</h4><h4 id="关于finally语句块"><a href="#关于finally语句块" class="headerlink" title="关于finally语句块"></a>关于finally语句块</h4><pre><code>1.finally语句块可以直接和try语句块连用。try...finally...2.try...catch...finally..也可3.在finally语句块中的代码一定会执行</code></pre><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><p>自定义“无效名异常”<br>1.编译时异常，直接继承Exception<br>2.运行时异常，直接继承RuntimeException<br>想让外部知道异常就用throws，不想让知道就自己用try..out解决<br>    public class IllegalNameException extends Exception{//编译时异常<br>    //pubilc class IllegalNameException extends RuntimeException//运行时异常<br>    //定义异常一般提供两个构造方法<br>    pubilic IllegalNameException(){}<br>    public IllegalNamneException(String massage){<br>        super(massage);<br>    }<br>    }</p><p>定义好注册<br>    public class CustomerService throws IllegalNameException{<br>        //完成注册<br>    if(name.length()&lt;6){<br>    //异常<br>    //创建异常对象<br>    //IllegalNameException e=new IllegalNameException(“用户名长度不能少于六位”);<br>    //手动抛出异常 <strong>既然是手动抛出就不要自己用try..out解决了，如果想让外部知道异常了就不要用try…out</strong><br>    //throw e;//这里是throw不是throws，最前面代码才是throws<br>    //前边两行代码连起来为<br>    throw new IllegalNameException(“用户名长度不能少于6位”)；<br>    }<br>    //如果代码执行到这，证明用户名合法</p><pre><code>}</code></pre><p>测试程序<br>    public class Test{<br>        public static void main(String[] args){<br>            //假如用户提供的用户名如下<br>            String username=”jack”<br>            //注册<br>            CustomerService cs=new CustomerService();<br>            try{//这里如果用throws下面的代码就不能执行了。<br>            cs.regiater(username);<br>            }catch(IllegalNameException e){<br>                Systom.out.println(e.getMessage());<br>            }<br>        }<br>    }</p><h4 id="方法的覆盖与异常"><a href="#方法的覆盖与异常" class="headerlink" title="方法的覆盖与异常"></a>方法的覆盖与异常</h4><p>重写的方法不能比被重写的方法抛出更宽泛的异常</p><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><pre><code>1.数组是一种引用类型2.数组是一种简单的数据结构3.数组是一个容器，可以用来存储其他元素4.数组分为一维数组，二维数组，三维数组，多维数组5.数组一旦创建，长度不可改变//声明一个一维数组，用来存储byte类型byte[] a1=(1,2,3,4);//存储char数组char[]b1=(&apos;a&apos;,&apos;b,&apos;c&apos;);//静态初始化一个int类型的一维数组int[] a1={10,20,30};//取得第一个元素System.out.println(&quot;第一个元素:&quot;+a1[0]);System.out.println(&quot;第二个元素:&quot;+a1[1]);System.out.println(&quot;第三个元素:&quot;+a1[2]);//遍历一维数组for(int i=0;i&lt;a1.length;i++){    system.out.println(a1[i]);}</code></pre><p>//动态声明一个int类型的数组，最多可以存储4个元素<br>int[] a1=new int[4];</p><h4 id="关于main方法中String-args"><a href="#关于main方法中String-args" class="headerlink" title="关于main方法中String[] args"></a>关于main方法中String[] args</h4><p>String[] args是专门用来接收命令行参数的</p><h4 id="数组的拷贝"><a href="#数组的拷贝" class="headerlink" title="数组的拷贝"></a>数组的拷贝</h4><pre><code>int[] src ={2,3,4,5,6,7};int[] dest={10,11,12,13,14,15,16};//吧src中的4,5,6拷贝到dest数组从13开始//System.arraycopy(数源组,源数据的开始下标,目标数组,目标数组的开始下标,拷贝的长度。);System.arraycopy(src,2,dest,3,3);//遍历for(int i=0;i&lt;dest.length;i++){    System.out.println(dest[i]);}</code></pre><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><pre><code>1.二维数组是特殊的一维数组2.特殊在这个一维数组中每个元素都是“一维数组”//静态初始化二维数组int[][] a={                {1,2,3},                {45,34},                {0}.                {10,23,85,99}};//以上这个数组有多少个一维数组System.out.println(a.length+&quot;个一维数组&quot;);//获取一个一维数组int[] a0=a[0];**//代表第一个int数组**int a00=a0[0];**//一维数组第一个元素**System.out.println(a00);//获取第一个一维数组的第一个元素System.out.println(a[0]a[0];//获取第二个一维数组的第一个元素System.out.println(a[1][0]);//遍历二维数组//纵向循环在外for(int i=0;i&lt;a.length;i++){    //对一维数组a[i]进行遍历    for(int j=0;j&lt;a[i].length;j++){        System.out.println(a[i][j]+&quot;&quot;);    }        System.out.println();}</code></pre><h3 id="冒泡排序算法"><a href="#冒泡排序算法" class="headerlink" title="冒泡排序算法"></a>冒泡排序算法</h3><pre><code>package SElianxi;</code></pre><p>public class A {<br>    public static void main (String[] args){<br>        int[] a ={3,1,6,2,5};<br>        //开始排序<br>        for(int i=a.length-1;i&gt;0;i–){<br>            for(int j=0;j&lt;i;j++){<br>                if(a[j]&gt;a[j+1]){<br>                    //交换位置<br>                    int temp;<br>                    temp=a[j];<br>                    a[j]=a[j+1];<br>                    a[j+1]=temp;<br>                }<br>            }<br>        }<br>        //遍历<br>        for(int i=0;i&lt;a.length;i++){<br>            System.out.print(a[i]);<br>        }<br>    }<br>}</p><h3 id="二分法-binarySearch-a-10-从a数组找10"><a href="#二分法-binarySearch-a-10-从a数组找10" class="headerlink" title="二分法 binarySearch(a,10) //从a数组找10"></a>二分法 binarySearch(a,10) //从a数组找10</h3><h3 id="Integer-int-String三种类型相互转换"><a href="#Integer-int-String三种类型相互转换" class="headerlink" title="Integer int  String三种类型相互转换"></a>Integer int  String三种类型相互转换</h3><p>int→Intager //基本数据类型→引用类型<br>    pubulic class A{}<br>    public static void main(String[] args){<br>    //1.int→Intager<br>    Integer i1= Integer.valueOf(10)；</p><pre><code>//2.Integer→intint i2 =i1.vatValue();//3.String--&gt;IntegerInteger i3 =Integer.valueOf(&quot;10&quot;);//4.Integer--&gt;intString s1=i3.toString();//5.String--&gt;intint i4=Integer.parseInt(&quot;123&quot;);//6.int--&gt;stringString s2=10+&quot;&quot;;}}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;title: javaSE进阶&lt;br&gt;date: 2019-12-10 23:51:18&lt;br&gt;tags: java&lt;br&gt;categories: java&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=409654891&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
#### 接口作用
   1.可以使项目分层，所有层都面向接口开发，提高效率
   2.降低代码间的耦合度。
   3.接口可多实现、多继承
    public interface customerService{
        //定义一个退出系统的方法
        void logout();
    }
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java基础</title>
    <link href="http://yoursite.com/2019/11/19/java%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/11/19/java基础/</id>
    <published>2019-11-18T23:39:08.000Z</published>
    <updated>2019-12-20T08:28:56.186Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=167870&auto=0&height=66"></iframe># 定义Java中的方法## 定义一个方法的语法是：访问修饰符 返回值类型 方法名(参数列表){    方法体}比如: public void print(){    Systtem.out.println("")}<h2 id="什么是类和对象"><a href="#什么是类和对象" class="headerlink" title="什么是类和对象"></a>什么是类和对象</h2><p>比如像买个手机，比如三星、苹果、华为就是对象，手机有屏幕5.8寸、cpu8核（有特定值）就 是方法。手机可以打电话发短信就是方法。类是抽象的，用来描述信息。对象是具体的。</p><p>public class 类名{<br>    //定义属性部分（成员变量）<br>    属性 有什么<br>    //定义方法部分<br>    方法 干什么<br>}</p><a id="more"></a><h3 id="使用对象的步骤"><a href="#使用对象的步骤" class="headerlink" title="使用对象的步骤"></a>使用对象的步骤</h3><p>1.创建对象<br>类名 对象名=new 类名();<br>2.使用对象<br>引用对象的属性：对象名.属性<br>phone.screen=5;//给screen属性赋值5</p><h3 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h3><p>作用域不同<br>    局部变量的作用域仅限于定义它的方法<br>    成员变量的作用域在整个类的内部都可见<br>初始值不同，成员变量有初始值，局部变量无<br>同一方法不允许有同名局部变量，不同方法可以有<br>重名时局部变量优先调用</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h3 id="什么是封装"><a href="#什么是封装" class="headerlink" title="什么是封装"></a>什么是封装</h3><ul><li>概念<br>  将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问。</li><li>好处<br>  1.只能通过规定的方法访问数据<br>  2.隐藏类的实例细节，方便修改和实现</li><li>封装的实现步骤<br>  修改属性的可见性(设为private)—创建getter/setter方法（用于属性的读写）—在getter/setter方法中加入属性控制语句(对属性值的合法性进行判断)<h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3>private 只能本类使用<br>默认 本类/同包可用<br>protected 本类/同包/子类可用<br>public 所有都可用</li></ul><p>switch只能用int或string类型，其他类型需要转换，比如:<br>long x=100L;<br>switch((int)x){<br> case””:<br> System.out.println(1);<br> break;<br>}</p><h3 id="关于java中的static关键字"><a href="#关于java中的static关键字" class="headerlink" title="关于java中的static关键字"></a>关于java中的static关键字</h3><pre><code>1.static翻译为静态的2.static修饰的方法是静态方法3.static修饰的变量是静态变量4.所有static修饰的元素都称为静态的，都可以使用&quot;类名.&quot;的方式访问，也可引用.的方式访问(不建议)5.static修饰的所有元素都是类级别的特征，和具体对象无关</code></pre><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><pre><code>1.基本作用：代码复用，有了继承才有“方法的覆盖”“多态机制”2.继承语法格式：3.[修饰符列表] class 类名 extends 父类名{    类体=属性+方法}4.java语言假设一个类没有显示的继承任何类，该类默认继承JavaSE库当中提供的java，lang.Object类。</code></pre><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>父类变子类，子类变父类= =<br>降低耦合度，提高程序扩展力。<br>核心！面向抽象编程，不要面向具体编程！！！<br>避免向下转型出现的classCastException：使用instanceof运算符。</p><h4 id="java语言基础主要包括："><a href="#java语言基础主要包括：" class="headerlink" title="java语言基础主要包括："></a>java语言基础主要包括：</h4><pre><code>*标识符*关键字*字面值*变量*数据类型*运算符*控制语句*方法*递归</code></pre><h4 id="总结内容"><a href="#总结内容" class="headerlink" title="总结内容"></a>总结内容</h4><pre><code>*面向对象和面向过程的区别*面向对象三大特征*OOA OOD OOP*类和对象的概念*类的定义*对象的创建和使用*JVM内存管理*参数传递*封装*继承*多态*this关键字*static关键字*final关键字*访问控制权限修饰符*构造函数*方法的重写/覆盖package和import</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=167870&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
# 定义Java中的方法
## 定义一个方法的语法是：
访问修饰符 返回值类型 方法名(参数列表){
    方法体
}
比如: public void print(){
    Systtem.out.println(&quot;&quot;)
}

&lt;h2 id=&quot;什么是类和对象&quot;&gt;&lt;a href=&quot;#什么是类和对象&quot; class=&quot;headerlink&quot; title=&quot;什么是类和对象&quot;&gt;&lt;/a&gt;什么是类和对象&lt;/h2&gt;&lt;p&gt;比如像买个手机，比如三星、苹果、华为就是对象，手机有屏幕5.8寸、cpu8核（有特定值）就 是方法。手机可以打电话发短信就是方法。类是抽象的，用来描述信息。对象是具体的。&lt;/p&gt;
&lt;p&gt;public class 类名{&lt;br&gt;    //定义属性部分（成员变量）&lt;br&gt;    属性 有什么&lt;br&gt;    //定义方法部分&lt;br&gt;    方法 干什么&lt;br&gt;}&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="学习 java" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0-java/"/>
    
  </entry>
  
  <entry>
    <title>关于js部分内容</title>
    <link href="http://yoursite.com/2019/11/12/%E5%85%B3%E4%BA%8Ejs%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9/"/>
    <id>http://yoursite.com/2019/11/12/关于js部分内容/</id>
    <published>2019-11-11T18:26:56.000Z</published>
    <updated>2019-12-20T08:28:47.915Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=469093872&auto=0&height=66"></iframe># 这是近期学习js总结## 1.让图片自适应框的大小### 知识点<ul><li>先获取div框的高度和宽度<br>div.offsetWidth<br>div.offsetHeight</li><li>重新设定图片的高度和宽度<br>Image.Width<br>Image.height<a id="more"></a><script type="text/javascript">  window.onload =function(){      var img1 =document.getElementById("id-img1");      adjsutImgFitDiv(img1);      var img2 =document.getElementById("id-img2")      adjsutImgFitDiv(img2);  };  function adjsutImgFitDiv(img){      var div =img.parentNode;      var w=div.offsetWidth;      var h=div.offsetHeight;      img.width=w - 2;      img.height= h - 2;  }</script><h2 id="2、为图片加边框"><a href="#2、为图片加边框" class="headerlink" title="2、为图片加边框"></a>2、为图片加边框</h2><h3 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h3>Image.style.border = “  1px  solid  red  ” ;<script type="text/javascript">  /*      边框颜色  */  function on_sel_color_changed(thisid){      var selColor =document.getElementById(thisid);      var color=selColor.value;      var selWidth=document.getElementById("id-sel-width");      var width=selWidth.value;      setImageBorder(width,color);  }  /*边框厚度*/  function on_sel_width_changed(thisid){      var selwidth=document.getElementById(thisid);      var width=selwidth.value;      var selColor=document.getElementById("id-sel-color");      var color=selColor.value;      setImageBorder(width,color);  }  /*图片上加边框*/  function setImageBorder(width,color){      var img=document.getElementById("id-img");      if(width=="0"||color=="none"){          img.style.border="";      }else{          img.style.border=width+"px solid"+color;      }  }</script><h2 id="3、显示局部图片"><a href="#3、显示局部图片" class="headerlink" title="3、显示局部图片"></a>3、显示局部图片</h2></li></ul><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li>每一张图片在HTML页面窗口中都是由定位尺寸的，通过对该定位尺寸进行变换计算，就可以选取图片的某一个局部 ，并在 页面中进行显示。<br>Image.style.backgroundPosition=  x坐标  y坐标 ;<h2 id="4、动态加载图片"><a href="#4、动态加载图片" class="headerlink" title="4、动态加载图片"></a>4、动态加载图片</h2><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3></li><li>自定义属性：<br>自己定义的  lazy_src<br>&lt;img lazy_src=”images/js-dyn-load.jpg“<br>src=”” alt=”图片未加载” id=”id-img”/&gt;</li><li>点击按钮时，把自定义属性，赋值给src，用于显示图片的路径<br>Image.src = image.attributes[‘lazy_src’].value;<h2 id="5延迟加载图片"><a href="#5延迟加载图片" class="headerlink" title="5延迟加载图片"></a>5延迟加载图片</h2><h3 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h3></li><li>时间间隔是：等待3000毫秒，显示图片<br>计时器：setTimeOut(function() {}  , 3000);<br>setInterval是循环计时，而setTimeOut是定时一次</li></ul><h2 id="6、重新加载验证码图片"><a href="#6、重新加载验证码图片" class="headerlink" title="6、重新加载验证码图片"></a>6、重新加载验证码图片</h2><h3 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h3><ul><li>自定义属性改变图片的路径，然后把自定义的路径 赋值给  src<br>img.src = img.attributes[‘lazy_src_’ + index.toString()].value;</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=469093872&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
# 这是近期学习js总结
## 1.让图片自适应框的大小
### 知识点

&lt;ul&gt;
&lt;li&gt;先获取div框的高度和宽度&lt;br&gt;div.offsetWidth&lt;br&gt;div.offsetHeight&lt;/li&gt;
&lt;li&gt;重新设定图片的高度和宽度&lt;br&gt;Image.Width&lt;br&gt;Image.height
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>next主题配置过程(持续更新)</title>
    <link href="http://yoursite.com/2019/11/11/next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/11/11/next主题配置过程/</id>
    <published>2019-11-11T14:55:45.000Z</published>
    <updated>2019-12-06T11:35:12.840Z</updated>
    
    <content type="html"><![CDATA[<p>经过一番折腾我们终于搭建好了个人博客，本文来讨论next主题的设置</p><h2 id="1、基本信息配置"><a href="#1、基本信息配置" class="headerlink" title="1、基本信息配置"></a>1、基本信息配置</h2><p>打开站点配置文件_config.yml，找到Site模块<br>title: 标题<br>subtitle: 副标题<br>description: 描述<br>author: 作者<br>language: 语言（简体中文是zh-Hans）<br>timezone: 网站时区（Hexo 默认使用您电脑的时区，不用写）</p><a id="more"></a><h2 id="2、菜单设置"><a href="#2、菜单设置" class="headerlink" title="2、菜单设置"></a>2、菜单设置</h2><p>菜单包括：首页、归档、分类、标签、关于等<br>我们刚开始默认的菜单只有首页和归档两个，不能够满足我们的要求，所以需要添加菜单，打开 主题配置文件 找到Menu Settings<br>menu:<br>  home: / || home                          //首页<br>  archives: /archives/||archive          //归档<br>  categories: /categories/||th           //分类<br>  tags: /tags/||tags                     //标签<br>  about: /about/||user                   //关于<br>  #schedule: /schedule/||calendar        //日程表<br>  #sitemap: /sitemap.xml||sitemap        //站点地图<br>  #commonweal: /404/||heartbeat          //公益404<br>需要哪个菜单就把那个取消注释打开就行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过一番折腾我们终于搭建好了个人博客，本文来讨论next主题的设置&lt;/p&gt;
&lt;h2 id=&quot;1、基本信息配置&quot;&gt;&lt;a href=&quot;#1、基本信息配置&quot; class=&quot;headerlink&quot; title=&quot;1、基本信息配置&quot;&gt;&lt;/a&gt;1、基本信息配置&lt;/h2&gt;&lt;p&gt;打开站点配置文件_config.yml，找到Site模块&lt;br&gt;title: 标题&lt;br&gt;subtitle: 副标题&lt;br&gt;description: 描述&lt;br&gt;author: 作者&lt;br&gt;language: 语言（简体中文是zh-Hans）&lt;br&gt;timezone: 网站时区（Hexo 默认使用您电脑的时区，不用写）&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/11/03/hello-world/"/>
    <id>http://yoursite.com/2019/11/03/hello-world/</id>
    <published>2019-11-03T08:59:35.937Z</published>
    <updated>2019-11-03T08:59:35.937Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
